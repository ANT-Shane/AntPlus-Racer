<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ANT_NET</name>
    </assembly>
    <members>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters">
            <summary>
            ANT-FS Client Parameters.
            The application should initialize ALL fields of the configuration struct,
            otherwise, they will all be zero
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.SerialNumber">
            <summary>
            Device serial number.  Set to 0 to use the serial number of the USB device
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.BeaconDeviceType">
            <summary>
            Client device type (transmitted in beacon)
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.BeaconManufacturerID">
            <summary>
            Client manufacturing ID (transmitted in beacon)
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.BeaconRadioFrequency">
            <summary>
            Radio frequency to use while in Link state.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.LinkPeriod">
            <summary>
            Beacon Period, as described in the ANT-FS Technology specification
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.IsPairingEnabled">
            <summary>
            Indicates whether pairing authentication is enabled
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.IsUploadEnabled">
            <summary>
            Indicates whether upload functionality is supported
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.IsDataAvailable">
            <summary>
            Indicates whether there is data available for download
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.AuthenticationType">
            <summary>
            Authentication type to include in beacon, as described in the ANT-FS Technology specification
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.BeaconTimeout">
            <summary>
            Time, in seconds, that the client will wait without receiving any commands from the host before dropping to Link state.
            Set to 255 to disable.  Zero is NOT a valid value.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.PairingTimeout">
            <summary>
            Time, in seconds, that the client library will wait for a response from the application to a pairing request.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientParameters.#ctor(System.UInt16,System.UInt16)">
            <summary>
            ANTFS_ClientParameters, with the default beacon parameters
            </summary>
            <param name="deviceType">Client device type</param>
            <param name="manufacturerID">Client manufacturing ID</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ResponseTimeout`1">
            <summary>
            Internal structure
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout`1.timeStart">
            <summary>
            Initial time
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout`1.timeLeft">
            <summary>
            Desired timeout
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout`1.ResponseID">
            <summary>
            ID of response we are waiting for
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout`1.bWaitingForResponse">
            <summary>
            Flag to indicate whether we are waiting for a response or not
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ResponseTimeout`1.SetTimeout(`0,System.UInt32)">
            <summary>
            Configure a timeout to wait for a response
            </summary>
            <param name="theResponse">Response we are looking for</param>
            <param name="theTimeout">Timeout, in miliseconds</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ResponseTimeout`1.ClearTimeout">
            <summary>
            Clear timeout
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ResponseTimeout`1.HasTimeoutExpired">
            <summary>
            Check if the timeout has expired.
            Timeout is not triggered again, until enabled explicitly
            </summary>
            <returns>True if the timeout has expired, false otherwise</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters">
            <summary>
            ANT-FS Device Parameters
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.DeviceID">
            <summary>
            Remote device ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.ManufacturerID">
            <summary>
            Manufacturer ID of remote device
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.DeviceType">
            <summary>
            Remote device type
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.AuthenticationType">
            <summary>
            Authentication type supported by remote device
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.StatusByte1">
            <summary>
            Status byte 1, as described in the ANT-FS Technology specification
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.StatusByte2">
            <summary>
            Status byte 2, as described in the ANT-FS Technology specification
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure specified device parameters
            </summary>
            <param name="DevID">Device ID</param>
            <param name="usMfgID">Manufacturer ID</param>
            <param name="usDevType">Device Type</param>
            <param name="AuthType">Authentication Type</param>
            <param name="Stat1">Status byte 1, as described in the ANT-FS Technology specification</param>
            <param name="Stat2">Status byte 2, as described in the ANT-FS Technology specification</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.IsPairingEnabled">
            <summary>
            Checks if the remote device is capable of the pairing authentication scheme
            </summary>
            <returns>True if pairing is supported, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.IsUploadEnabled">
            <summary>
            Checks if the remote device supports uploads
            </summary>
            <returns>True if uploads are supported, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.IsDataAvailable">
            <summary>
            Checks if the remote device has data available for download
            </summary>
            <returns>True if data is available, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.GetBeaconPeriod">
            <summary>
            Obtains the beacon period of the remote device
            </summary>
            <returns>Beacon period of the remote device</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.GetClientState">
            <summary>
            Obtains current state of the remote device
            </summary>
            <returns>State of the remote device</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.SetPairingBit(System.Boolean)">
            <summary>
            Enables/disables the pairing bit in the device parameters
            </summary>
            <param name="bEnable">Set to true to enable pairing, false otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.SetUploadBit(System.Boolean)">
            <summary>
            Enables/disables the upload bit in the device parameters
            </summary>
            <param name="bEnable">Set to true to enable uploads, false otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.SetDataAvailableBit(System.Boolean)">
            <summary>
            Enables/disables the data available bit in the device parameters
            </summary>
            <param name="bEnable">Set to true if there is data available for download, false otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.ToString">
            <summary>
            Returns a string with the decoded device parameters
            </summary>
            <returns>String with decoded device parameters</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_SearchResults">
            <summary>
            Parameters retrieved by the host after finding a client matching its search criteria
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_SearchResults.DeviceParameters">
            <summary>
            Remote device parameters
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_SearchResults.FriendlyName">
            <summary>
            Friendly name of the remote device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_SearchResults.ToString">
            <summary>
            Returns a string with the decoded device parameters and friendly name
            </summary>
            <returns>String with decoded device parameters and friendly name</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory">
            <summary>
            ANT-FS Directory
            Contains information about the files available on a remote device
            </summary>
            //TODO there is a version of this with more functionality in Shane's kiosk code if we wanted to use this for something it would be worth taking a look at that as well
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.dirHeader">
            <summary>
            Directory Header
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.dirSize">
            <summary>
            Number of entries contained in directory
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.dirFiles">
            <summary>
            Indexed entries in the directory
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.#ctor">
            <summary>
            Creates an empty ANT-FS Directory structure
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.#ctor(System.Byte[])">
            <summary>
            Creates an ANTFS_Directory object from downlaoded data
            </summary>
            <param name="DirectoryFile">Directory file received on a download</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetNumberOfFileEntries(System.Byte[])">
            <summary>
            Obtains the number of file entries contained in the directory
            </summary>
            <param name="pvDirectory">Directory file</param>
            <returns>Number of file entries contained in directory</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetNewFileList(System.Byte[])">
            <summary>
            Decodes the directory and gets a list of files that need to be downloaded
            </summary>
            <param name="pvDirectory">Directory file</param>
            <returns>Array containing the file indexes that need to be downloaded.
            Returns an empty array if there are no new files.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.LookupFileEntry(System.Byte[],System.UInt32)">
            <summary>
            Looks up the requested directory entry
            </summary>
            <param name="pvDirectory">Directory file</param>
            <param name="ulFileEntry">Zero-based entry number of the requested file (based on the order in which files are written in directory)</param>
            <returns>Requested directory entry, or null if entry is not valid</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.LookupFileIndex(System.Byte[],System.UInt16)">
            <summary>
             Looks up the requested directory entry
            </summary>
            <param name="pvDirectory">Directory file</param>
            <param name="usFileIndex">Index of file to be looked up</param>
            <returns>Requested directory entry, or null if entry is not valid</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetHeader(System.Byte[])">
            <summary>
            Retrieves the directory file header
            </summary>
            <param name="pvDirectory">Directory file</param>
            <returns>Directory header structure.  An exception is thrown if the file is too small to contain a header</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.ToString">
            <summary>
            Print directory
            </summary>
            <returns>Formatted string with decoded directory</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetVersion">
            <summary>
            Obtains version of the directory
            </summary>
            <returns>Formatted string with ANT-FS directory version</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.ParseFlags(System.Byte)">
            <summary>
            Parses general flags into a string  
            </summary>
            <param name="ucFlags">Flag byte</param>
            <returns>Formatted string with decoded flags</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.TimeFormat">
            <summary>
            Format of time used in directory
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.GeneralFlags">
            <summary>
            Bit mapped flags of file permissions
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header">
            <summary>
            Directory header structure
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.Version">
            <summary>
            The version of the Directory File Structure.  The most significant 4 bits
            indicate major revision while the least significant 4 bits indicate a minor
            revision
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.ElementLength">
            <summary>
            The length of each structure, in bytes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.TimeFormat">
            <summary>
            Defines how the system will keep track of Date/Time stamps
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.Reserved">
            <summary>
            Reserved bytes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.SystemTime">
            <summary>
            Number of seconds elapsed since the system was powered up
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.Date">
            <summary>
            The number of seconds elapsed since 00:00 in the morning of December 31, 1989.
            The value zero (0) specifies an unknown date.
            Values of less than 0x0FFFFFFF will be interpreted as being system time or 
            some other custom time format (e.g. counter incremented every time directory
            entries are modified)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry">
            <summary>
            Directory file entry structure
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileIndex">
            <summary>
            Data file index
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileDataType">
            <summary>
            Data type of the file, which informs how to interpret the file
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileSubType">
            <summary>
            Part of the identifier field, used to uniquely identify a file.
            In .FIT, used to identify a sub type of the .FIT file type.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileNumber">
            <summary>
            Part of the identifier field, used to uniquely identify a file.
            In .FIT, used to identify a particular instance of a file sub type.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.SpecificFlags">
            <summary>
            File data type specific bit mapped flags
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.GeneralFlags">
            <summary>
            Bit mapped flags of file permissions
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileSize">
            <summary>
            Size of file in bytes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.TimeStamp">
            <summary>
            The number of seconds elapsed since 00:00 in the morning of December 31, 1989.
            The value zero (0) specifies an unknown date.
            Values of less than 0x0FFFFFFF will be interpreted as being system time or
            some other custom time format.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Exception">
            <summary>
            Exceptions thrown by ANT-FS objects
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Exception">
            <summary>
            An exception occuring in the ANT Managed Library
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Exception.#ctor(System.String)">
            <summary>
            Prefixes given string with "ANTLibrary Exception: "
            </summary>
            <param name="exceptionDetail">String to prefix</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Exception.#ctor(System.String,System.Exception)">
            <summary>
            Prefixes given string with "ANTLibrary Exception: " and propates inner exception
            </summary>
            <param name="exceptionDetail">String to prefix</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Exception.#ctor(ANT_Managed_Library.ANT_Exception)">
            <summary>
            Copy constructor
            </summary>
            <param name="aex">ANTException to copy</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Exception.#ctor(System.String)">
            <summary>
             Constructor
            </summary>
            <param name="exceptionDetail">String to append to exception message</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Exception.#ctor(System.String,System.Exception)">
            <summary>
            Prefixes given string with "ANTLibrary Exception: " and propagates inner exception
            </summary>
            <param name="exceptionDetail">String to prefix</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_RequestFailed_Exception">
            <summary>
            Exceptions thrown by ANT-FS objects when a request to perform a specific operation failed
            Developers must ensure that these exceptions are handled appropiately to continue with the program execution
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_RequestFailed_Exception.#ctor(System.String,ANT_Managed_Library.ANTFS.ReturnCode)">
            <summary>
            Constructor
            </summary>
            <param name="strOperation">Requested operation that failed</param>
            <param name="theReturn">ANT-FS Library return code</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_RequestFailed_Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="exceptionDetail">Requested operation that failed</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ReturnCode">
            <summary>
            Return codes for ANT-FS operations
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.AuthenticationType">
            <summary>
            ANT-FS authentication types
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.DisconnectType">
            <summary>
            ANT-FS disconnect command type
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.Print">
            <summary>
            Helper class that prints human readable versions of the constants
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.Print.AsString(System.Enum)">
            <summary>
            Prints the description attribute of an enumeration value
            </summary>
            <param name="eMyEnum">Enumeration value to print</param>
            <returns>Description string, e.g. "Operation successful"</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.Print.AsEnum(System.Enum)">
            <summary>
            Prints the name of an enumeration value
            </summary>
            <param name="eMyEnum">Enumeration value to print</param>
            <returns>Named enumeration string, e.g. "ANTFS.ReturnCode.Pass"</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters">
            <summary>
            ANT-FS Request Parameters
            These are the parameters received from the host
            along with a download/upload/erase request
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters.FileIndex">
            <summary>
            File index of the requested download, upload or erase operation
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters.Offset">
            <summary>
            Requested offset.  The client library handles offsets internally,
            this is available for information purposes.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters.BlockSize">
            <summary>
            Maximum number of bytes the host can send/receive in a single block.
            The client library handles this internally, this is available for
            information purposes.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters.MaxSize">
            <summary>
            Maximum number of bytes that the host is requesting to upload.
            This includes the offset plus the total remaining bytes.
            This can be used to determine if there is enough space available
            in the device to handle the upload.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters.CrcSeed">
            <summary>
            CRC Seed for the download.
            The client library handles this internally, this is available for
            information purposes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_RequestParameters.IsInitialRequest">
            <summary>
            Indicates whether this is an initial download request or an attempt
            to resume a previous transfer.  
            Resuming within a single session is handled by the library, this is
            available for information purposes.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_DisconnectParameters">
            <summary>
            ANT-FS Disconnect Parameters
            These are the parameters received from the host
            along with the disconnect command
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DisconnectParameters.CommandType">
            <summary>
            Disconnect command type
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DisconnectParameters.TimeDuration">
            <summary>
            Requested amount in time (in 30 s increments) to become undiscoverable
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DisconnectParameters.ApplicationSpecificDuration">
            <summary>
             Requested application specific undiscoverable time
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_DownloadParameters">
            <summary>
            Application defined parameters for a download response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DownloadParameters.FileIndex">
            <summary>
            File index of requested download
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DownloadParameters.MaxBlockSize">
            <summary>
            Maximum number of bytes to send in a single block
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_UploadParameters">
            <summary>
            Application defined parameters for an upload response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_UploadParameters.FileIndex">
            <summary>
            File index of requested upload
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_UploadParameters.MaxFileSize">
            <summary>
            Maximum file size that can be stored in requested upload location
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_UploadParameters.MaxBlockSize">
            <summary>
            Maximum number of bytes that can be received in a single block
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.TransferStatus">
            <summary>
            Status of an ongoing or completed data transfer
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.TransferStatus.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor initializes status and obtains percentage from parameters
            </summary>
            <param name="Progress">Current byte progress</param>
            <param name="Length">Expected data length</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.TransferStatus.ToString">
            <summary>
            Provides a string containing the transfer status
            </summary>
            <returns>Formatted string with the current byte progress, expected length and percentage</returns>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.TransferStatus.ByteProgress">
            <summary>
            Current byte progress of a data transfer
            </summary>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.TransferStatus.TotalLength">
            <summary>
            Expected length of a data transfer
            </summary>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.TransferStatus.Percentage">
            <summary>
            Current percentage of completion of a data transfer
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Channel">
            <summary>
            Control class for an individual ANT channel. Created and accessed through the ANTDevice class.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.IANT_Channel">
            <summary>
            Interface for an ANT channel. Allows classes to use different channel implementations behind the interface.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.getUnmgdFramer">
            <summary>
            Returns the underlying C++ ANT framer reference that this channel uses for messaging. Useful to pass to unmanaged C++ implementations.
            </summary>
            <returns>Pointer to the C++ ANT framer for messaging</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.getChannelNum">
            <summary>
            Returns the channel number of this chanel
            </summary>
            <returns>The channel number that is sent with messages on the ANT messaging layer</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.requestStatus(System.UInt32)">
            <summary>
            Returns current channel status.
            Throws exception on timeout.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.requestID(System.UInt32)">
            <summary>
            Returns the channel ID
            Throws exception on timeout
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.assignChannel(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,System.UInt32)">
            <overloads>Assign channel</overloads>
            <summary>
            Assign an ANT channel along with its main parameters.
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max networks-1</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.assignChannelExt(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelTypeExtended,System.UInt32)">
            <overloads>Assign channel (extended)</overloads>
            <summary>
            Assign an ANT channel, using extended channel assignment
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max netwoks - 1</param>
            <param name="extAssignByte">Extended assignment byte</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.unassignChannel(System.UInt32)">
            <overloads>Unassign channel</overloads>
            <summary>
            Unassign this channel.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setChannelID(System.UInt16,System.Boolean,System.Byte,System.Byte,System.UInt32)">
            <overloads>Set the Channel ID</overloads>
            <summary>
            Set the Channel ID of this channel.
            Throws exception if device type is > 127.
            </summary>
            <param name="deviceNumber">Device number to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="pairingEnabled">Device pairing bit.</param>
            <param name="deviceTypeID">Device type to assign to channel. Must be less than 128. Set to 0 for receiver wild card matching</param>
            <param name="transmissionTypeID">Transmission type to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setChannelID_UsingSerial(System.Boolean,System.Byte,System.Byte,System.UInt32)">
            <overloads>Sets the Channel ID, using serial number as device number</overloads>
            <summary>
            Identical to setChannelID, except last two bytes of serial number are used for device number.
            Not available on all ANT devices.
            Throws exception if device type is > 127.
            </summary>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setChannelPeriod(System.UInt16,System.UInt32)">
            <overloads>Sets channel message period</overloads>
            <summary>
            Set this channel's messaging period
            </summary>
            <param name="messagePeriod_32768unitspersecond">Desired period in seconds * 32768</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setChannelFreq(System.Byte,System.UInt32)">
            <overloads>Sets channel RF Frequency</overloads>
            <summary>
            Set this channel's RF frequency, with the given offset from 2400Mhz. 
            Note: Changing this frequency may affect the ability to certify the product in certain areas of the world.
            </summary>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setChannelTransmitPower(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.UInt32)">
            <overloads>Sets the channel transmission power</overloads>
            <summary>
            Set the transmission power of this channel
            Throws exception if device is not capable of per-channel transmit power.
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setChannelSearchTimeout(System.Byte,System.UInt32)">
            <overloads>Sets the channel search timeout</overloads>
            <summary>
            Set the search timeout
            </summary>
            <param name="searchTimeout">timeout in 2.5 second units (in newer devices 255=infinite)</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.openChannel(System.UInt32)">
            <overloads>Opens the channel</overloads>
            <summary>
            Opens this channel
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendBroadcastData(System.Byte[])">
            <overloads>Sends broadcast message</overloads>
            <summary>
            Sends the given data on the broadcast transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendAcknowledgedData(System.Byte[],System.UInt32)">
            <overloads>Sends acknowledged message</overloads>
            <summary>
            Sends the given data as an acknowledged transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
            <param name="ackWaitTime">Time in ms to wait for acknowledgement</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendBurstTransfer(System.Byte[],System.UInt32)">
            <overloads>Sends burst transfer</overloads>
            <summary>
            Sends the given data as a burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="data">data to send, can be any length</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendAdvancedBurstTransfer(System.Byte[],System.Byte,System.UInt32)">
            <summary>
            Sends the given data as an advanced burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="data">data to send, can be any length</param>
            <param name="numStdPcktsPerSerialMsg"> determines how many bytes of data are sent in each packet 
            over the serial port in multiples of packet size (the size of the packet payload at the
            wireless level is determined by the pckt size set in the ConfigureAdvancedBurst command).</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled, 4=invalid parameter</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendExtBroadcastData(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <overloads>Sends extended broadcast message</overloads>
            <summary>
            Sends the given data as an extended broadcast transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendExtAcknowledgedData(System.UInt16,System.Byte,System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sends extended acknowledged message</overloads>
            <summary>
            Sends the given data as an extended acknowledged transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
            <param name="ackWaitTime">Time in ms to wait for acknowledgement</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.sendExtBurstTransfer(System.UInt16,System.Byte,System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sends extended burst data</overloads>
            <summary>
            Sends the given data as an extended burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send, can be any length</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.closeChannel(System.UInt32)">
            <overloads>Closes the channel</overloads>
            <summary>
            Close this channel
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setLowPrioritySearchTimeout(System.Byte,System.UInt32)">
            <overloads>Sets the channel low priority search timeout</overloads>
            <summary>
            Sets the search timeout for the channel's low-priority search, where it will not interrupt other open channels.
            When this period expires the channel will drop to high-priority search.
            This feature is not available in all ANT devices.
            </summary>
            <param name="lowPriorityTimeout">Timeout period in 2.5 second units</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.includeExcludeList_addChannel(System.UInt16,System.Byte,System.Byte,System.Byte,System.UInt32)">
            <overloads>Adds a channel ID to the device inclusion/exclusion list</overloads>
            <summary>
            Add the given channel ID to the channel's inclusion/exclusion list.
            The channelID is then included or excluded from the wild card search depending on how the list is configured.
            Throws exception if listIndex > 3.
            </summary>
            <param name="deviceNumber">deviceNumber of the channelID to add</param>
            <param name="deviceTypeID">deviceType of the channelID to add</param>
            <param name="transmissionTypeID">transmissionType of the channelID to add</param>
            <param name="listIndex">position in inclusion/exclusion list to add channelID at (Max size of list is 4)</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.includeExcludeList_Configure(System.Byte,System.Boolean,System.UInt32)">
            <overloads>Configures the device inclusion/exclusion list</overloads>
            <summary>
            Configures the inclusion/exclusion list. If isExclusionList is true the channel IDs will be 
            excluded from any wild card search on this channel. Otherwise the IDs are the only IDs accepted in the search.
            Throws exception if list size is greater than 4.
            </summary>
            <param name="listSize">The desired size of the list, max size is 4, 0=none</param>
            <param name="isExclusionList">True = exclusion list, False = inclusion list</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.setProximitySearch(System.Byte,System.UInt32)">
            <overloads>Configures proximity search</overloads>
            <summary>
            Enables a one time proximity requirement for searching.  Only ANT devices within the set proximity bin can be acquired.
            Search threshold values are not correlated to specific distances as this will be dependent on the system design.
            This feature is not available on all ANT devices.
            Throws exception if given bin value is > 10.
            </summary>
            <param name="thresholdBin">Threshold bin. Value from 0-10 (0= disabled). A search threshold value of 1 (i.e. bin 1) will yield the smallest radius search and is generally recommended as there is less chance of connecting to the wrong device. </param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.configFrequencyAgility(System.Byte,System.Byte,System.Byte,System.UInt32)">
            <overloads>Configures the three operating RF frequencies for ANT frequency agility mode</overloads>
            <summary>
            This function configures the three operating RF frequencies for ANT frequency agility mode 
            and should be used with the ADV_FrequencyAgility_0x04 extended channel assignment flag.
            Should not be used with shared, or Tx/Rx only channel types. 
            This feature is not available on all ANT devices.
            </summary>
            <param name="freq1">Operating RF frequency 1</param>
            <param name="freq2">Operating RF frequency 2</param>
            <param name="freq3">Operating RF frequency 3</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.IANT_Channel.SetAGCConfig(System.Byte,System.UInt32)">
            <overloads>Configures channel AGC</overloads>
            <summary>
            Configure channel AGC
            </summary>
            <param name="AGCConfigByte">Configuration byte</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="E:ANT_Managed_Library.IANT_Channel.DeviceNotification">
            <summary>
            This event is fired whenever there are events on the device level that may impact the channel.
            Events that currently occur (Event, value of notification info Object):
                Reset, null
                Shutdown, null
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.IANT_Channel.rawChannelResponse">
            <summary>
            The channel callback event for forwarding the raw msg struct. Triggered every time a message is received from the ANT device.
            Examples include transmit and receive messages. If you are coding in C# use the other response event version.
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.IANT_Channel.channelResponse">
            <summary>
            The channel callback event. Triggered every time a message is received from the ANT device.
            Examples include transmit and receive messages.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.getParentDevice">
            <summary>
            Returns the ANTDevice that this channel belongs to
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.getUnmgdFramer">
            <summary>
            Returns the underlying C++ ANT framer reference that this channel uses for messaging. Useful to pass to unmanaged C++ implementations.
            </summary>
            <returns>Pointer to the C++ ANT framer for messaging</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.getChannelNum">
            <summary>
            Returns the channel number of this instance
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.Dispose">
            <summary>
            Dispose this channel.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.requestStatus(System.UInt32)">
            <summary>
            Returns current channel status.
            Throws exception on timeout.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.requestID(System.UInt32)">
            <summary>
            Returns the channel ID
            Throws exception on timeout
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannel(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,System.UInt32)">
            <overloads>Assign channel</overloads>
            <summary>
            Assign an ANT channel along with its main parameters.
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max networks-1</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannel(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte)">
            <summary>
            Assign an ANT channel.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannelExt(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelTypeExtended,System.UInt32)">
            <overloads>Assign channel (extended)</overloads>
            <summary>
            Assign an ANT channel, using extended channel assignment
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max netwoks - 1</param>
            <param name="extAssignByte">Extended assignment byte</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannelExt(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelTypeExtended)">
            <summary>
            Assign an ANT channel, using extended channel assignment
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max netwoks - 1</param>
            <param name="extAssignByte">Extended assignment byte</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.unassignChannel(System.UInt32)">
            <overloads>Unassign channel</overloads>
            <summary>
            Unassign this channel.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.unassignChannel">
            <summary>
            Unassigns this channel.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID(System.UInt16,System.Boolean,System.Byte,System.Byte,System.UInt32)">
            <overloads>Set the Channel ID</overloads>
            <summary>
            Set the Channel ID of this channel.
            Throws exception if device type is > 127.
            </summary>
            <param name="deviceNumber">Device number to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="pairingEnabled">Device pairing bit.</param>
            <param name="deviceTypeID">Device type to assign to channel. Must be less than 128. Set to 0 for receiver wild card matching</param>
            <param name="transmissionTypeID">Transmission type to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID(System.UInt16,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Set the Channel ID of this channel.
            Throws exception if device type is > 127.
            </summary>
            <param name="deviceNumber">Device number to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="pairingEnabled">Device pairing bit</param>
            <param name="deviceTypeID">Device type to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="transmissionTypeID">Transmission type to assign to channel. Set to 0 for receiver wild card matching</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID_UsingSerial(System.Boolean,System.Byte,System.Byte,System.UInt32)">
            <overloads>Sets the Channel ID, using serial number as device number</overloads>
            <summary>
            Identical to setChannelID, except last two bytes of serial number are used for device number.
            Not available on all ANT devices.
            Throws exception if device type is > 127.
            </summary>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID_UsingSerial(System.Boolean,System.Byte,System.Byte)">
            <summary>
            Identical to setChannelID, except last two bytes of serial number are used for device number.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelPeriod(System.UInt16,System.UInt32)">
            <overloads>Sets channel message period</overloads>
            <summary>
            Set this channel's messaging period
            </summary>
            <param name="messagePeriod_32768unitspersecond">Desired period in seconds * 32768</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelPeriod(System.UInt16)">
            <summary>
            Set this channel's messaging period
            </summary>
            <param name="messagePeriod_32768unitspersecond">Desired period in seconds * 32768</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelFreq(System.Byte,System.UInt32)">
            <overloads>Sets channel RF Frequency</overloads>
            <summary>
            Set this channel's RF frequency, with the given offset from 2400Mhz. 
            Note: Changing this frequency may affect the ability to certify the product in certain areas of the world.
            </summary>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelFreq(System.Byte)">
            <summary>
            Set this channel's RF frequency, with the given offset from 2400Mhz. 
            Note: Changing this frequency may affect the ability to certify the product in certain areas of the world.
            </summary>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelTransmitPower(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.UInt32)">
            <overloads>Sets the channel transmission power</overloads>
            <summary>
            Set the transmission power of this channel
            Throws exception if device is not capable of per-channel transmit power.
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelTransmitPower(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower)">
            <summary>
            Set the transmission power of this channel
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelSearchTimeout(System.Byte,System.UInt32)">
            <overloads>Sets the channel search timeout</overloads>
            <summary>
            Set the search timeout
            </summary>
            <param name="searchTimeout">timeout in 2.5 second units (in newer devices 255=infinite)</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelSearchTimeout(System.Byte)">
            <summary>
            Set the search timeout
            </summary>
            <param name="searchTimeout">timeout in 2.5 second units (in newer devices 255=infinite)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.openChannel(System.UInt32)">
            <overloads>Opens the channel</overloads>
            <summary>
            Opens this channel
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.openChannel">
            <summary>
            Opens this channel
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendBroadcastData(System.Byte[])">
            <overloads>Sends broadcast message</overloads>
            <summary>
            Sends the given data on the broadcast transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendAcknowledgedData(System.Byte[],System.UInt32)">
            <overloads>Sends acknowledged message</overloads>
            <summary>
            Sends the given data as an acknowledged transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
            <param name="ackWaitTime">Time in ms to wait for acknowledgement</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendAcknowledgedData(System.Byte[])">
            <summary>
            Sends the given data as an acknowledged transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendBurstTransfer(System.Byte[],System.UInt32)">
            <overloads>Sends burst transfer</overloads>
            <summary>
            Sends the given data as a burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="data">data to send, can be any length</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendBurstTransfer(System.Byte[])">
            <summary>
            Sends the given data as a burst transmission.
            </summary>
            <param name="data">data to send, can be any length</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendAdvancedBurstTransfer(System.Byte[],System.Byte,System.UInt32)">
            <summary>
            Sends the given data as an advanced burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="data">data to send, can be any length</param>
            <param name="numStdPcktsPerSerialMsg"> determines how many bytes of data are sent in each packet 
            over the serial port in multiples of packet size (the size of the packet payload at the
            wireless level is determined by the pckt size set in the ConfigureAdvancedBurst command).</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled, 4=invalid parameter</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendAdvancedBurstTransfer(System.Byte[],System.Byte)">
            <summary>
            Sends the given data as an advanced burst transmission.
            </summary>
            <param name="data">data to send, can be any length</param>
            <param name="numStdPcktsPerSerialMsg"> determines how many bytes of data are sent in each packet 
            over the serial port in multiples of packet size (the size of the packet payload at the
            wireless level is determined by the pckt size set in the ConfigureAdvancedBurst command).</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtBroadcastData(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <overloads>Sends extended broadcast message</overloads>
            <summary>
            Sends the given data as an extended broadcast transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtAcknowledgedData(System.UInt16,System.Byte,System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sends extended acknowledged message</overloads>
            <summary>
            Sends the given data as an extended acknowledged transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
            <param name="ackWaitTime">Time in ms to wait for acknowledgement</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtAcknowledgedData(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Sends the given data as an extended acknowledged transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtBurstTransfer(System.UInt16,System.Byte,System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sends extended burst data</overloads>
            <summary>
            Sends the given data as an extended burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send, can be any length</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtBurstTransfer(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Sends the given data as an extended burst transmission.
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send, can be any length</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.closeChannel(System.UInt32)">
            <overloads>Closes the channel</overloads>
            <summary>
            Close this channel
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.closeChannel">
            <summary>
            Close this channel
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setLowPrioritySearchTimeout(System.Byte,System.UInt32)">
            <overloads>Sets the channel low priority search timeout</overloads>
            <summary>
            Sets the search timeout for the channel's low-priority search, where it will not interrupt other open channels.
            When this period expires the channel will drop to high-priority search.
            This feature is not available in all ANT devices.
            </summary>
            <param name="lowPriorityTimeout">Timeout period in 2.5 second units</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setLowPrioritySearchTimeout(System.Byte)">
            <summary>
            Sets the timeout period for the channel's low-priority search, where it will not interrupt other open channels.
            When this period expires the channel will drop to high-priority search.
            </summary>
            <param name="lowPriorityTimeout">Timeout period in 2.5 second units</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_addChannel(System.UInt16,System.Byte,System.Byte,System.Byte,System.UInt32)">
            <overloads>Adds a channel ID to the device inclusion/exclusion list</overloads>
            <summary>
            Add the given channel ID to the channel's inclusion/exclusion list.
            The channelID is then included or excluded from the wild card search depending on how the list is configured.
            Throws exception if listIndex > 3.
            </summary>
            <param name="deviceNumber">deviceNumber of the channelID to add</param>
            <param name="deviceTypeID">deviceType of the channelID to add</param>
            <param name="transmissionTypeID">transmissionType of the channelID to add</param>
            <param name="listIndex">position in inclusion/exclusion list to add channelID at (Max size of list is 4)</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_addChannel(System.UInt16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Add the given channel ID to the channel's inclusion/exclusion list.
            The channelID is then included or excluded from the wild card search depending on how the list is configured.
            Throws exception if listIndex > 3.
            </summary>
            <param name="deviceNumber">deviceNumber of the channelID to add</param>
            <param name="deviceTypeID">deviceType of the channelID to add</param>
            <param name="transmissionTypeID">transmissionType of the channelID to add</param>
            <param name="listIndex">position in inclusion/exclusion list to add channelID at (0..3)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_Configure(System.Byte,System.Boolean,System.UInt32)">
            <overloads>Configures the device inclusion/exclusion list</overloads>
            <summary>
            Configures the inclusion/exclusion list. If isExclusionList is true the channel IDs will be 
            excluded from any wild card search on this channel. Otherwise the IDs are the only IDs accepted in the search.
            Throws exception if list size is greater than 4.
            </summary>
            <param name="listSize">The desired size of the list, max size is 4, 0=none</param>
            <param name="isExclusionList">True = exclusion list, False = inclusion list</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_Configure(System.Byte,System.Boolean)">
            <summary>
            Configures the inclusion/exclusion list. If isExclusionList is true the channel IDs will be 
            excluded from any wild card search on this channel. Otherwise the IDs are the only IDs accepted in the search.
            Throws exception if list size is greater than 4.
            </summary>
            <param name="listSize">The desired size of the list, max size is 4, 0=none</param>
            <param name="isExclusionList">True = exclusion list, False = inclusion list</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setProximitySearch(System.Byte,System.UInt32)">
            <overloads>Configures proximity search</overloads>
            <summary>
            Enables a one time proximity requirement for searching.  Only ANT devices within the set proximity bin can be acquired.
            Search threshold values are not correlated to specific distances as this will be dependent on the system design.
            This feature is not available on all ANT devices.
            Throws exception if given bin value is > 10.
            </summary>
            <param name="thresholdBin">Threshold bin. Value from 0-10 (0= disabled). A search threshold value of 1 (i.e. bin 1) will yield the smallest radius search and is generally recommended as there is less chance of connecting to the wrong device. </param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setProximitySearch(System.Byte)">
            <summary>
            Enables a one time proximity requirement for searching.  Only ANT devices within the set proximity bin can be acquired.
            Search threshold values are not correlated to specific distances as this will be dependent on the system design.
            Throws exception if given bin value is > 10.
            </summary>
            <param name="thresholdBin">Threshold bin. Value from 0-10 (0= disabled). A search threshold value of 1 (i.e. bin 1) will yield the smallest radius search and is generally recommended as there is less chance of connecting to the wrong device. </param>        
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.configFrequencyAgility(System.Byte,System.Byte,System.Byte,System.UInt32)">
            <overloads>Configures the three operating RF frequencies for ANT frequency agility mode</overloads>
            <summary>
            This function configures the three operating RF frequencies for ANT frequency agility mode 
            and should be used with the ADV_FrequencyAgility_0x04 extended channel assignment flag.
            Should not be used with shared, or Tx/Rx only channel types. 
            This feature is not available on all ANT devices.
            </summary>
            <param name="freq1">Operating RF frequency 1</param>
            <param name="freq2">Operating RF frequency 2</param>
            <param name="freq3">Operating RF frequency 3</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.configFrequencyAgility(System.Byte,System.Byte,System.Byte)">
            <summary>
            This function configures the three operating RF frequencies for ANT frequency agility mode 
            and should be used with ADV_FrequencyAgility_0x04 channel assignment flag.
            Should not be used with shared, or Tx/Rx only channel types. 
            </summary>
            <param name="freq1">Operating RF frequency 1</param>
            <param name="freq2">Operating RF frequency 2</param>
            <param name="freq3">Operating RF frequency 3</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.SetAGCConfig(System.Byte,System.UInt32)">
            <overloads>Configures channel AGC</overloads>
            <summary>
            Configure channel AGC
            </summary>
            <param name="AGCConfigByte">Configuration byte</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.SetAGCConfig(System.Byte)">
            <summary>
            Configure channel AGC
            </summary>
            <param name="AGCConfigByte">Configuration byte</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.SetSearchWaveform(System.UInt16,System.UInt32)">
            <overloads>Sets Search Waveform</overloads>
            <summary>
            Set Search Waveform
            </summary>
            <param name="waveform">Waveform</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.SetSearchWaveform(System.UInt16)">
            <summary>
            Set Search Waveform
            </summary>
            <param name="waveform">Waveform</param>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Channel.rawChannelResponse">
            <summary>
            The channel callback event for forwarding the raw msg struct. Triggered every time a message is received from the ANT device.
            Examples include transmit and receive messages. If you are coding in C# use the other response event version.
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Channel.DeviceNotification">
            <summary>
            This event is fired whenever there are events on the device level that may impact the channel.
            Events that currently occur (Event, value of notification info Object):
                Reset, null
                Shutdown, null
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Channel.channelResponse">
            <summary>
            The channel callback event. Triggered every time a message is received from the ANT device.
            Examples include transmit and receive messages.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ChannelID">
            <summary>
            Structure containing the data composing a channel ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelID.deviceNumber">
            <summary>
            Device Number
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelID.pairingBit">
            <summary>
            Pairing Bit
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelID.deviceTypeID">
            <summary>
            Device Type ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelID.transmissionTypeID">
            <summary>
            Transmission Type ID
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_ChannelID.#ctor(System.UInt16,System.Byte,System.Byte)">
            <summary>
            Initializes a new Channel ID Object
            </summary>
            <param name="deviceNumber">Device Number</param>
            <param name="deviceType">Device Type ID</param>
            <param name="transmissionType">Transmission Type ID</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device">
            <summary>
            Control class for a given ANT device. An instance of this class is an open connection to the given ANT USB device.
            Handles creating channels and device setup.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.#ctor(System.Byte,System.UInt32)">
            <overloads>
            Opens a connection to an ANT device attached by USB.
            Throws exception if a connection can not be established.
            </overloads>
            <summary>
            Attempts to open a connection to an ANT device attached by USB using the given deviceNum and baud rate
            Throws exception if a connection can not be established.
            </summary>
            <param name="USBDeviceNum">The device number of the ANT USB device (the first connected device starts at 0 and so on)</param>
            <param name="baudRate">The baud rate to connect at (AP2/AT3=57600, AP1=50000)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.#ctor(ANT_Managed_Library.ANT_ReferenceLibrary.PortType,System.Byte,System.UInt32,ANT_Managed_Library.ANT_ReferenceLibrary.FramerType)">
            <overloads>
            Opens a connection to an ANT device attached by USB.
            Throws exception if a connection can not be established.
            </overloads>
            <summary>
            Attempts to open a connection to an ANT device attached by USB using the given deviceNum and baud rate
            Throws exception if a connection can not be established.
            </summary>
            <param name="portType">The type of connection to use when talking to the device</param>
            <param name="USBDeviceNum">If port type is USB, device number of the ANT USB device.
            If port type is COM this is the COM port number</param>
            <param name="baudRate">The baud rate to connect at (USB: AP2/AT3=57600, AP1=50000)</param>
            <param name="frameType">The framing method to use for the connection to the chip.
            Needed for multimode chips and currently only supported on COM connections.</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.#ctor">
            <summary>
            Automatically connects to first availiable ANTDevice.
            Throws exception if a connection can not be established.
            Will not auto find COM-connected devices.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.Finalize">
            <summary>
            Destructor closes all opened resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.Dispose">
            <summary>
            Dispose method for explicit resource cleanup. Same as shutdownDeviceInstance() but doesn't nullify reference.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.shutdownDeviceInstance(ANT_Managed_Library.ANT_Device@)">
            <summary>
            Shuts down all open resources, calls reset on the physical device, and nullifies the given ANTDevice and all its channels
            </summary>
            <param name="deviceToShutdown">ANTDevice to shutdown</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ToString">
            <summary>
            Convert instance to a string including the USB device number the connection is on
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getFramerPtr">
            <summary>
            Returns the pointer to the underlying C++ ANT Framer used for messaging
            </summary>
            <returns>Pointer to C++ ANT Framer</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getOpenedUSBDeviceNum">
            <summary>
            Returns the device number used when this instance was opened
            Note: For some device types this number is not static and can change whenever new devices are enumerated in the system
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getOpenedUSBBaudRate">
            <summary>
            Returns the baud rate used when this instance was opened
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getOpenedFrameType">
            <summary>
            Returns the Frame Type used to open the device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getOpenedPortType">
            <summary>
            Returns the Port Type used to open the device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getChannel(System.Int32)">
            <summary>
            Returns the requested ANTChannel or throws an exception if channel doesn't exist.
            </summary>
            <param name="num">Channel number requested</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getNumChannels">
            <summary>
            Returns the number of ANTChannels owned by this device
            </summary>
            <returns>Number of ant channels on device</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.cancelTransfers(System.Int32)">
            <summary>
            Sets the cancel flag on all acknowledged and burst transfers in progress for the given amount of time.
            When these transmissions see the flag they will abort their operation and return as cancelled.
            </summary>
            <param name="cancelWaitTime">Time to set cancel flag for</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceCapabilities(System.Boolean,System.UInt32)">
            <overloads>Returns the device capabilities</overloads>
            <summary>
            Returns the capabilities of this device.
            Throws an exception if capabilities are not received.
            </summary>
            <param name="forceNewCopy">Force function to send request message to device</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>Last device capabilities received or a new copy if forceNewCopy is true</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceCapabilities">
            <summary>
            Returns the device capabilities of this device.
            Throws an exception if capabilities are not received.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceCapabilities(System.UInt32)">
            <summary>
            Returns the device capabilities of this device.
            Throws an exception if capabilities are not received.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ResetUSB">
            <overloads>Resets the USB device</overloads>
            <summary>
            Resets this USB device at the driver level
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ResetSystem(System.UInt32)">
            <overloads>Resets the device and all its channels</overloads>
            <summary>
            Reset this device and all associated channels
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ResetSystem">
            <summary>
            Reset this device and all associated channels
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setNetworkKey(System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sets a network key</overloads>
            <summary>
            Set the network key for the given network
            Throws exception if net number is invalid or network key is not 8-bytes in length
            </summary>
            <param name="netNumber">The network number to set the key for</param>
            <param name="networkKey">The 8-byte network key</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setNetworkKey(System.Byte,System.Byte[])">
            <summary>
            Set the network key for the given network
            Throws exception if net number is invalid or network key is not 8-bytes in length
            </summary>
            <param name="netNumber">The network number to set the key for</param>
            <param name="networkKey">The 8-byte network key</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setTransmitPowerForAllChannels(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.UInt32)">
            <overloads>Sets the transmit power for all channels</overloads>
            <summary>
            Set the transmit power for all channels of this device
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setTransmitPowerForAllChannels(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower)">
            <summary>
            Set the transmit power for all channels of this device
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.configureAdvancedBurstSplitting(System.Boolean)">
            <summary>
            When enabled advanced burst messages will be split into standard burst packets when received.
            This is disabled by default.
            </summary>
            <param name="splitBursts">Whether to split advanced burst messages.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.configureAdvancedBursting(System.Boolean,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,System.UInt32)">
            <summary>
            Configure advanced bursting for this device.
            </summary>
            <param name="enable">Whether to enable advanced bursting messages</param>
            <param name="maxPacketLength">Maximum packet length allowed for bursting messages (valid values are 1-3)</param>
            <param name="requiredFields">Features that the application requires the device to use</param>
            <param name="optionalFields">Features that the device should use if it supports them</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.configureAdvancedBursting(System.Boolean,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags)">
            <summary>
            Configure advanced bursting for this device.
            </summary>
            <param name="enable">Whether to enable advanced bursting messages</param>
            <param name="maxPacketLength">Maximum packet length allowed for bursting messages (valid values are 1-3)</param>
            <param name="requiredFields">Features that the application requires the device to use</param>
            <param name="optionalFields">Features that the device should use if it supports them</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.configureAdvancedBursting_ext(System.Boolean,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,System.UInt16,System.Byte,System.UInt32)">
            <summary>
            Configure advanced bursting for this device including extended parameters.
            </summary>
            <param name="enable">Whether to enable advanced bursting messages</param>
            <param name="maxPacketLength">Maximum packet length allowed for bursting messages (valid values are 1-3)</param>
            <param name="requiredFields">Features that the application requires the device to use</param>
            <param name="optionalFields">Features that the device should use if it supports them</param>
            <param name="stallCount">Maximum number of burst periods (~3.1ms) to stall for while waiting for the next message</param>
            <param name="retryCount">Number of times (multiplied by 5) to retry burst</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.configureAdvancedBursting_ext(System.Boolean,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags,System.UInt16,System.Byte)">
            <summary>
            Configure advanced bursting for this device including extended parameters.
            </summary>
            <param name="enable">Whether to enable advanced bursting messages</param>
            <param name="maxPacketLength">Maximum packet length allowed for bursting messages (valid values are 1-3)</param>
            <param name="requiredFields">Features that the application requires the device to use</param>
            <param name="optionalFields">Features that the device should use if it supports them</param>
            <param name="stallCount">Maximum number of burst periods (~3.1ms) to stall for while waiting for the next message</param>
            <param name="retryCount">Number of times (multiplied by 5) to retry burst</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.EnableLED(System.Boolean,System.UInt32)">
            <overloads>Enables/Disables the device's LED</overloads>
            <summary>
            Enables/Disables the LED flashing when a transmission event occurs
            </summary>
            <param name="IsEnabled">Desired state</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.EnableLED(System.Boolean)">
            <summary>
            Enables/Disables the LED flashing when a transmission event occurs
            </summary>
            <param name="IsEnabled">Desired state</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceUSBPID">
            <summary>
            Obtains the PID (Product ID) of the USB device.
            Throws an exception if the PID is not received.
            </summary>
            <returns>PID of the USB device.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceUSBVID">
            <summary>
            Obtains the VID (Vendor ID) of the USB device
            </summary>
            <returns>VID of the USB device</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getSerialNumber">
            <summary>
            Returns the USB device serial number.
            This can be used to figure out the serial number if the option to use the USB device
            serial number was selected.
            </summary>
            <returns>Client serial number</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceUSBInfo(System.Byte)">
            <overloads>Obtains the device USB Information</overloads>
            <summary>
            Obtains the USB information for the device
            Throws an exception if no information is received
            </summary>
            <param name="deviceNum">USB Device Number</param>
            <returns>USB Device Information</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceUSBInfo">
            <summary>
            Obtains the USB information for the device
            Throws an exception if no information is received
            </summary>
            <returns>USB Device Information</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setUSBDescriptorString(System.Byte,System.Byte[],System.Byte,System.UInt32)">
            <overloads>Configure USB descriptor strings
            IMPORTANT: The AP2-USB does not support re-writeable flash memory, and once a descriptor has 
            been set three times, it cannot be changed.  Use this command with caution.
            </overloads>
            <summary>
            Configure USB descriptor strings.
            </summary>
            <param name="stringNum">Descriptor string number</param>
            <param name="descriptorString">Descriptor string</param>
            <param name="stringSize">String length (max 32).  If a longer string is provided, it will be truncated.</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>        
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setUSBDescriptorString(System.Byte,System.Byte[],System.Byte)">
            <summary>
            Configure USB descriptor strings
            </summary>
            <param name="stringNum">Descriptor string number</param>
            <param name="descriptorString">Descriptor string</param>
            <param name="stringSize">String length (max 32).  If a longer string is provided, it will be truncated.</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setUSBDescriptorString(System.Byte,System.String,System.UInt32)">
            <summary>
            Configure USB descriptor strings
            </summary>
            <param name="stringNum">Descriptor string number</param>
            <param name="descriptorString">Descriptor string (max length 32).  If a longer string is provided, it will be truncated</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setUSBDescriptorString(System.Byte,System.String)">
            <summary>
            Configure USB descriptor strings
            </summary>
            <param name="stringNum">Descriptor string number</param>
            <param name="descriptorString">Descriptor string (max length 32).  If a longer string is provided, it will be truncated</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setUSBDescriptorString(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Configures USB descriptor strings (VID and PID).
            </summary>
            <param name="usbVID">USB Vendor ID</param>
            <param name="usbPID">USB Product ID</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setUSBDescriptorString(System.UInt16,System.UInt16)">
            <summary>
            Configures USB descriptor strings (VID and PID)
            </summary>
            <param name="usbVID">USB Vendor ID</param>
            <param name="usbPID">USB Product ID</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessageAndResponse(System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID,System.UInt32)">
            <overloads>Requests a message from the device and returns the response</overloads>
            <summary>
            Request a message from device and returns the response. 
            Throws exception on timeout.
            </summary>
            <param name="channelNum">Channel to send request on</param>
            <param name="messageID">Request to send</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessageAndResponse(ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID,System.UInt32)">
            <summary>
            Request a message from device on channel 0 and returns the response. 
            Throws exception on timeout.
            </summary>
            <param name="messageID">Request to send</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessage(System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID)">
            <overloads>Requests a message from the device</overloads>
            <summary>
            Request a message from device
            </summary>
            <param name="channelNum">Channel to send request on</param>
            <param name="messageID">Request to send</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessage(ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID)">
            <summary>
            Request a message from device
            </summary>
            <param name="messageID">Request to send</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.openRxScanMode(System.UInt32)">
            <overloads>Set device in continuous scanning mode</overloads>
            <summary>
            Starts operation in continuous scanning mode.
            This allows the device to receive all messages matching the configured channel ID mask in an asynchronous manner.
            This feature is not available on all ANT devices.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.openRxScanMode">
            <summary>
            Starts operation in continuous scanning mode.
            This allows the device to receive all messages matching the configured channel ID mask in an asynchronous manner.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.startCWTest(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.Byte,System.UInt32)">
            <overloads>Initializes and starts CW test mode</overloads>
            <summary>
            Initialize and start CW test mode. This mode is to test your implementation for RF frequency requirements.
            The device will transmit an unmodulated carrier wave at the RF frequency of 2400Mhz + RFFreqOffset at the specified power level.
            This mode can then only be exited by a system reset.
            Note: When this function call returns false, the system will be reset automatically.
            </summary>
            <param name="transmitPower">Transmission power to test at</param>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
            <param name="responseWaitTime">Time to wait for response, used for both initialization and start command</param>
            <returns>False if initialization or starting of CW test mode fails. On false, the system is automatically reset.</returns>
            <remarks>
            This function encapsulates both ANT_InitCWTestMode and ANT_SetCWTestMode from the old library.
            It will automatically reset the system if either call fails. 
            The given response time is used for both calls and the reset time is 500ms. 
            So max wait time = responseTime*2 + 500ms 
            </remarks>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.enableRxExtendedMessages(System.Boolean,System.UInt32)">
            <overloads>Enables extended message reception</overloads>
            <summary>
            Enables extended message receiving. When enabled, messages received will contain extended data.
            </summary>
            <param name="IsEnabled">Desired State</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.enableRxExtendedMessages(System.Boolean)">
            <summary>
            Enables extended message receiving. When enabled, messages received will contain extended data.
            </summary>
            <param name="IsEnabled">Desired State</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.crystalEnable(System.UInt32)">
            <overloads>Enables the use of external 32kHz crystal</overloads>
            <summary>
            If the use of an external 32kHz crystal input is desired, this message must be sent once, each time a startup message is received
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
            <remarks> Enabling an external 32kHz crystal input as a low power clock source saves ~85uA while ANT is active when compared to using the internal clock source. </remarks>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.crystalEnable">
            <summary>
            If the use of an external 32kHz crystal input is desired, this message must be sent once, each time a startup message is received
            </summary>
            <remarks> Enabling an external 32kHz crystal input as a low power clock source saves ~85uA while ANT is active when compared to using the internal clock source. </remarks>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.writeRawMessageToDevice(System.Byte,System.Byte[])">
            <summary>
            Writes a message to the device, this function allows sending manually formatted messages.
            </summary>
            <param name="msgID">msgID to write</param>
            <param name="msgData">data buffer to write</param>
            <returns>False if writing bytes to device fails</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setLibConfig(ANT_Managed_Library.ANT_ReferenceLibrary.LibConfigFlags,System.UInt32)">
            <overloads>Configure the device ANT library, ie: to send extra msg info</overloads>
            <summary>
            Configure the device ANT library, ie: to send extra msg info
            </summary>
            <param name="libConfigFlags">Config flags</param>
            <param name="responseWaitTime">Time to wait for response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setLibConfig(ANT_Managed_Library.ANT_ReferenceLibrary.LibConfigFlags)">
            <summary>
            Configure the device ANT library, ie: to send extra msg info
            </summary>
            <param name="libConfigFlags">Config flags</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.unlockInterface(System.UInt32)">
            <overloads>Unlock Interface</overloads>
            <summary>
            Unlock Interface
            </summary>
            <param name="responseWaitTime">Time to wait for response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.unlockInterface">
            <summary>
            Unlock Interface
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Write(System.Byte[],System.UInt32)">
            <overloads>Writes a SensRCore command to non-volatile memory</overloads>
            <summary>
            Writes a SensRcore command to non-volatile memory.
            Throws exception if command string length > 255, although commands will be much smaller
            </summary>
            <param name="commandString">SensRcore command to write: [Cmd][CmdData0]...[CmdDataN], must be less than 256 bytes</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Write(System.Byte[])">
            <summary>
            Writes a SensRcore command to non-volatile memory.
            Throws exception if command string length > 255.
            </summary>
            <param name="commandString">SensRcore command to write: [Cmd][CmdData0]...[CmdDataN], must be less than 256 bytes</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Clear(System.UInt32)">
            <overloads>Clears the NVM</overloads>
            <summary>
            Clears the non-volatile memory. NVM should be cleared before beginning write operations.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Clear">
            <summary>
            Clears the non-volatile memory. NVM should be cleared before beginning write operations.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_setDefaultSector(System.Byte,System.UInt32)">
            <overloads>Sets the default SensRCore sector</overloads>
            <summary>
            Set the default sector which will be executed after mandatory execution of sector 0.
            This command has no effect if it is set to 0 or the Read Pins for Sector command appears in sector 0.
            </summary>
            <param name="sectorNum">sector number to set as default</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_setDefaultSector(System.Byte)">
            <summary>
            Set the default sector which will be executed after mandatory execution of sector 0.
            This command has no effect if it is set to 0 or the Read Pins for Sector command appears in sector 0.
            </summary>
            <param name="sectorNum">sector number to set as default</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_endSector(System.UInt32)">
            <overloads>Writes a sector break to NVM</overloads>
            <summary>
            Writes a sector break in the NVM image
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_endSector">
            <summary>
            Writes a sector break in the NVM image
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_requestNVMDump(System.UInt32)">
            <overloads>Request a dump of the device's script memory</overloads>
            <summary>
            Requests the device to return the current NVM contents through the device callback function.
            The end of the dump is signified by a 0x57 NVM_Cmd msg, which contains 0x04 EndDump code followed by 
            a byte signifying how many instructions were read and returned.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_requestNVMDump">
            <summary>
            Requests the device to return the current NVM contents through the device callback function.
            The end of the dump is signified by a 0x57 NVM_Cmd msg, which contains 0x04 EndDump code followed by 
            a byte signifying how many instructions were read and returned.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_lockNVM(System.UInt32)">
            <overloads>Locks the NVM contents</overloads>
            <summary>
            Locks the NVM so that it can not be read by the dump function. 
            Can only be disabled by clearing the NVM.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_lockNVM">
            <summary>
            Locks the NVM so that it can not be read by the dump function. 
            Can only be disabled by clearing the NVM.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Run(System.Byte,System.UInt32)">
            <overloads>Manually run a script</overloads>
            <summary>
            Manually run given script number
            </summary>
            <param name="ScriptNumber">Script number to run</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Run(System.Byte)">
            <summary>
            Manually run given script number
            </summary>
            <param name="ScriptNumber">Script number to run</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.fitSetFEState(System.Byte,System.UInt32)">
            <overloads>Sets the equipment state</overloads>
             <summary>
             Sets the equipment state.
             This command is specifically for use with the FIT1e module.
             </summary>
             <param name="feState">Fitness equipment state</param>
             <param name="responseWaitTime">Time to wait for device success response</param>
             <returns>True on success.  Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.fitSetFEState(System.Byte)">
            <summary>
            Sets the equipment state.
            This command is specifically for use with the FIT1e module.
            </summary>
            <param name="feState">Fitness equipment state</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.fitAdjustPairingSettings(System.Byte,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Adjusts the pairing distance settings.
            This command is specifically for use with the FIT1e module.
            </summary>
            <param name="searchLv">Minimum signal strength for a signal to be considered for pairing.</param>
            <param name="pairLv">Signal strength required for the FIT1e to pair with an ANT+ HR strap or watch</param>
            <param name="trackLv">An ANT+ device will unpair if the signal strength drops below this setting while in
            READY state or within the first 30 secons of the IN_USE state</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success.  Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.fitAdjustPairingSettings(System.Byte,System.Byte,System.Byte)">
            <summary>
            Adjusts the pairing distance settings.
            This command is specifically for use with the FIT1e module.
            </summary>
            <param name="searchLv">Minimum signal strength for a signal to be considered for pairing.</param>
            <param name="pairLv">Signal strength required for the FIT1e to pair with an ANT+ HR strap or watch</param>
            <param name="trackLv">An ANT+ device will unpair if the signal strength drops below this setting while in
            READY state or within the first 30 secons of the IN_USE state</param>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Device.deviceResponse">
            <summary>
            The channel callback event. Triggered every time a message is received from the ANT device.
            Examples include requested responses and setup status messages.
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Device.serialError">
            <summary>
            This event is triggered when there is a serial communication error with the ANT Device.
            If the error is critical all communication with the device is dead and the
            device reference is sent in this function to allow the application
            to know which device is dead and to dispose of it.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device.ANTMessage">
            <summary>
            ANTMessage struct as defined in unmanaged code for marshalling ant messages with unmanaged code
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.ANTMessage.msgID">
            <summary>
            Message ID byte
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.ANTMessage.ucharBuf">
            <summary>
            Data buffer
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device.DeviceNotificationCode">
            <summary>
            Codes for the device notification event
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.DeviceNotificationCode.Reset">
            <summary>
            The device is being reset
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.DeviceNotificationCode.Shutdown">
            <summary>
            The device is being shutdown
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device.dDeviceResponseHandler">
            <summary>
            Delegate for device response event
            </summary>
            <param name="response">Message details received from device</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device.dSerialErrorHandler">
            <summary>
            Function to handle ANT_Device serial errors
            </summary>
            <param name="sender">The ANT_Device reporting the error</param>
            <param name="error">The serial error that occured</param>
            <param name="isCritical">If true, the communication with the device is lost and this device object should be disposed</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device.serialErrorCode">
            <summary>
            ANT Device Serial Error Codes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.SerialWriteError">
            <summary>
            A write command to the device failed, could be a usb communication issue or due to invalid paramters passed to the write function.
            If it is a device communication failure, a serial read error will most likely occur shortly.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.SerialReadError">
            <summary>
            A failure occured reading data from the device.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.DeviceConnectionLost">
            <summary>
            Communication with the device has been lost.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.MessageLost_CrcError">
            <summary>
            A message received by the device failed the crc check and was discarded.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.MessageLost_QueueOverflow">
            <summary>
            The message queue for received messages has overflowed and one or more messages were lost.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.MessageLost_TooLarge">
            <summary>
            A message received was over the maximum message size, and the message was discarded.
            This is usually due to a communication error or an error in the library or library compilation settings.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.MessageLost_InvalidChannel">
            <summary>
            A channel event was received for a channel which does not exist and the message was dropped (but will still appear in the logs)
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Device.serialErrorCode.Unknown">
            <summary>
            Unspecified error, most likely a new or changed error definition
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities">
            <summary>
            Container for all the device capability information, returned from an ANTDevice
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceCapabilities.maxANTChannels">
            <summary>
            Number of channels available
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceCapabilities.maxNetworks">
            <summary>
            Number of simultaneous networks allowed
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceCapabilities.maxDataChannels">
            <summary>
            Number of SensRcore data channels available
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceCapabilities.printCapabilities">
            <summary>
            Prints a string containing a formatted, readable version of all the capabilities
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceCapabilities.ToString">
            <summary>
            Returns a formatted, readable string of all the capabilities
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.BasicCapabilitiesMasks">
            <summary>
            Basic Capabilities Masks (3rd Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.AdvancedCapabilitiesMasks">
            <summary>
            Advanced Capabilities Masks 1 (4th Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.AdvancedCapabilities2Masks">
            <summary>
            Advanced Capabilities Masks 2 (5th Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.AdvancedCapabilities3Masks">
            <summary>
            Advanced Capabilities Masks 3 (7th Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceInfo">
            <summary>
            Container for all the USB Device information, returned from an ANTDevice
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceInfo.productDescription">
            <summary>
            USB Device Product Description
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceInfo.serialString">
            <summary>
            USB Device Serial String
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceInfo.printProductDescription">
            <summary>
            Returns a formatted, readable string for the product description
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceInfo.printSerialString">
            <summary>
            Returns a formatted, readable string for the serial string
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Common">
            <summary>
            This is a static class that manages all the functions and variables common to the whole scope of the library.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Common.autoResetIsEnabled">
            <summary>
            Enables or disables all devices from resetting on startup, shutdown, and on CWTestMode Failure.
            Default = true.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.getNumDetectedUSBDevices">
            <summary>
            Returns the number of ANT USB devices currently detected by the system.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.checkUnmanagedLibrary">
            <summary>
            Checks if the unmanaged library is present in the application's working directory.
            Throws an exception if the library is missing.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.checkUSBLibraries">
            <summary>
            Checks if device specific libraries are present in the application's working directory.
            Throws an exception if any of these is missing.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.enableDebugLogs">
            <overloads>Enables debug files</overloads>
            <summary>
            Initializes and enables debug logs for all devices
            Note:  For application specific logs to work properly
            (e.g. ANT-FS logs), this needs to be called BEFORE
            creating an ANT Device.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.enableDebugLogs(System.String)">
            <summary>
            Initializes and enables debug logs for all devices,
            and stores the log in the specified path.  
            Note:  For application specific logs to work properly
            (e.g. ANT-FS logs), this needs to be called BEFORE
            creating an ANT Device.
            </summary>
            <param name="debugPath">Debug log directory</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.disableDebugLogs">
            <summary>
            Disables and closes the debug logs
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.setDebugLogDirectory(System.String)">
            <summary>
            Set the directory the log files are saved to. 
            This string will prefix the file name so must end with a slash or will be part of the name. 
            ie: directoryPath='c:\ANT\logs' will result in files being saved to the \ANT directory named logsdevice0.txt. 
            Throws an exception if directory does not exist.
            </summary>
            <param name="directoryPath">
            Path to directory to save log files in. Default is the running directory.
            This string will prefix the file name so must end with a slash or will be part of the name. 
            ie: directoryPath='c:\ANT\logs' will result in files being saved to the \ANT directory named logsdevice0.txt.
            </param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.initDebugLogThread(System.String)">
            <summary>
            Creates a debug log for the currently executing thread
            </summary>
            <param name="name">Name of file (will result in ao_debug_name)</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.writeToDebugLog(System.String)">
            <summary>
            Adds an application specific message to the log for the current thread
            </summary>
            <param name="message">Message to write to the log</param>
            <returns>True on success</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary">
            <summary>
            Contains all the ANT constants and enumerations for general use.
            Note: Where desired, in functions where enumerations are required, a byte type can be 
            cast to the enumeration to feed the function raw byte values.
            IE: <c>ANTDeviceInstance.RequestMessage((RequestMessageID)0x4E));</c> would compile.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.PortType">
            <summary>
            Possible port connection types.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.FramerType">
            <summary>
            Possible framing modes.
            Use FramerType.basicANT unless you know you need to use another.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType">
            <summary>
            Channel Type flags. A valid channel type is one BASE parameter (Slave XOR Receive) 
            combined by '|' (bitwise OR) with any desired ADV parameters
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.MessagingReturnCode">
            <summary>
            The int status codes returned by the acknowledged and broadcast messaging functions.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.BasicChannelStatusCode">
            <summary>
            Basic Channel status message codes, the bottom two bits of the received status message
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower">
            <summary>
            Transmit Power offsets
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.StartupMessage">
            <summary>
            Startup message
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID">
            <summary>
            Message ID to request message.
            Note: Where desired, raw byte values can be cast to the enum type. IE: <c>(RequestMessageID)0x4E</c> will compile.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.SensRcoreScriptCommandCodes">
            <summary>
            Command Codes for SensRcore operations
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.LibConfigFlags">
            <summary>
            Flags for configuring device ANT library
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.AdcancedBurstConfigFlags">
            <summary>
            Flags for configuring advanced bursting features.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.ANTMessageID">
            <summary>
            MessageIDs for reference
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTMessageID.EXT_CHANNEL_RADIO_FREQ_0x5C">
            <summary>
            OBSOLETE: (for 905 radio)
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTMessageID.FIT1_SET_EQUIP_STATE_0x91">
            <summary>
            *** CONFLICT: w/ Sensrcore, Fit1 will never have sensrcore enabled
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTMessageID.DEBUG_0xF0">
            <summary>
            use 2 byte sub-index identifier
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID">
            <summary>
            EventIDs for reference
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.EVENT_TRANSFER_TX_START_0x0A">
            <summary>
            a pending transmit transfer has begun
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.EVENT_TRANSFER_TX_NEXT_MESSAGE_0x11">
            <summary>
            only enabled in FIT1
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CHANNEL_IN_WRONG_STATE_0x15">
            <summary>
            returned on attempt to perform an action from the wrong channel state
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CHANNEL_NOT_OPENED_0x16">
            <summary>
            returned on attempt to communicate on a channel that is not open
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CHANNEL_ID_NOT_SET_0x18">
            <summary>
            returned on attempt to open a channel without setting the channel ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CLOSE_ALL_CHANNELS_0x19">
            <summary>
            returned when attempting to start scanning mode
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.TRANSFER_IN_PROGRESS_0x1F">
            <summary>
            returned on attempt to communicate on a channel with a TX transfer in progress
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.TRANSFER_SEQUENCE_NUMBER_ERROR_0x20">
            <summary>
            returned when sequence number is out of order on a Burst transfer
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.MESSAGE_SIZE_EXCEEDS_LIMIT_0x27">
            <summary>
            returned if a data message is provided that is too large
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_MESSAGE_0x28">
            <summary>
            returned when the message has an invalid parameter
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_NETWORK_NUMBER_0x29">
            <summary>
            returned when an invalid network number is provided
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_LIST_ID_0x30">
            <summary>
            returned when the provided list ID or size exceeds the limit
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_SCAN_TX_CHANNEL_0x31">
            <summary>
            returned when attempting to transmit on channel 0 when in scan mode
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_RSSI_THRESHOLD_0x32">
            <summary>
            returned when an invalid RSSI threshold is provided
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_PARAMETER_PROVIDED_0x33">
            <summary>
            returned when an invalid parameter is specified in a configuration message
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.EVENT_QUE_OVERFLOW_0x35">
            <summary>
            ANT event que has overflowed and lost 1 or more events
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.EVENT_CLK_ERROR_0x36">
            <summary>
            !! debug XOSC16M
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_FULL_ERROR_0x40">
            <summary>
            error writing to script
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_WRITE_ERROR_0x41">
            <summary>
            error writing to script
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_INVALID_PAGE_ERROR_0x42">
            <summary>
            error accessing script page
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_LOCKED_ERROR_0x43">
            <summary>
            the scripts are locked and can't be dumped
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.NO_RESPONSE_MESSAGE_0x50">
            <summary>
            returned to the Command_SerialMessageProcess function
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.RETURN_TO_MFG_0x51">
            <summary>
            default return to any mesg when the module determines that the mfg procedure has not been fully completed
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.FIT_ACTIVE_SEARCH_TIMEOUT_0x60">
            <summary>
            Fit1 only event added for timeout of the pairing state after the Fit module becomes active
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.FIT_WATCH_PAIR_0x61">
            <summary>
            Fit1 only
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.FIT_WATCH_UNPAIR_0x62">
            <summary>
            Fit1 only
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.USB_STRING_WRITE_FAIL_0x70">
            <summary>
            AP2USB only, returned when it is unable to change a descriptor string
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.USB_PID">
            <summary>
            PIDs for reference
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Response">
            <summary>
            Container for all the information passed from an ANT device callback function
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.sender">
            <summary>
            The object that created this response (ie: The corresponding ANTChannel or ANTDevice instance).
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.antChannel">
            <summary>
            The channel parameter received in the message. Note: For some messages this is not applicable.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.timeReceived">
            <summary>
            The time the message was received.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.responseID">
            <summary>
            The MessageID of the response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.messageContents">
            <summary>
            The raw contents of the response message
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getChannelEventCode">
            <summary>
            Returns messageContents[2] cast to an ANTEventID. Throws an exception if this is not a channel event.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getMessageID">
            <summary>
            Returns messageContents[1] cast to an ANTMessageID. Throws an exception if this is not a response event.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getDataPayload">
            <summary>
            Returns the 8-byte data payload of an ANT message. Throws an exception if this is not a received message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getBurstSequenceNumber">
            <summary>
            Returns the burst sequence number (upper three bits of channel number). Throws exception if this is not a burst event.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getDeviceIDfromExt">
            <summary>
            Returns the channel ID portion of an extended message. Throws an exception if this is not an extended message.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.isExtended">
            <summary>
            Returns true if this is an extended message, false otherwise
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.splitExtMessage(ANT_Managed_Library.ANT_Response.extMsgParts)">
            <summary>
            Splits and returns the requested part of an extended message. Throws an exception if this is not an extended message.
            </summary>
            <param name="whichPart">The desired part of the message</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ChannelStatus">
            <summary>
            Contains the information returned by a channel status request message
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelStatus.BasicStatus">
            <summary>
            Bits 0-1 of the status response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelStatus.networkNumber">
            <summary>
            Bits 2-3 of the status response. Invalid on AP1.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelStatus.ChannelType">
            <summary>
            Bits 4-7 of the status response. Not a valid channelType on AP1.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_ChannelStatus.#ctor(ANT_Managed_Library.ANT_ReferenceLibrary.BasicChannelStatusCode,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType)">
            <summary>
            Creates and fills the ChannelStatus
            </summary>
            <param name="BasicStatus"></param>
            <param name="networkNumber"></param>
            <param name="ChannelType"></param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient">
            <summary>
            Control class for a given ANT device, with Integrated ANT-FS Client functionality. 
            An instance of this class is an open connection to the given ANT USB device.
            Handles creating channels and device setup, and allows managing the file system (EEPROM)
            as well as configuring and controlling ANT-FS sessions.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.defaultWait">
            <summary>
            Default timeout for responses
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.responseBuf">
            <summary>
            Queue with the responses received from ANT related to Integrated ANT-FS
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.lastAcceptedResponse">
            <summary>
            Last received ANT Response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.hostdeviceEvents">
            <summary>
            Device events
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.flagHostDeviceEvents">
            <summary>
            Flag indicating availabity of device events
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.#ctor">
            <summary>
            Creates an Integrated ANT-FS Client object, by automatically trying to connect to the USB stick
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.#ctor(System.Byte)">
            <summary>
            Creates an Integrated ANT-FS Client object, specifying the USB device number.  Baud rate is assumed to be 57600bps.
            </summary>
            <param name="USBDeviceNum">USB device number</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.shutdown">
            <summary>
            Close connection to the ANT USB device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.getLastAcceptedResponse">
            <summary>
            Get last ANT response
            </summary>
            <returns>Message code of the last response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.writeRawMessageToDevice(System.Byte[])">
            <summary>
            Send a raw ANT message
            </summary>
            <param name="msgToWrite">byte array, with the raw ANT message to send</param>
            <returns>True if the message was written successfully</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.WaitForNextMatchMsg(System.Int32[],System.Int32)">
            <summary>
            Wait for a message matching the desired pattern
            </summary>
            <param name="matchPattern">Pattern to match</param>
            <param name="wait_ms">time to wait, in ms</param>
            <returns>True if the matching message is seen in the configured timeout</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.compareConditionalByte(System.Byte,System.Int32)">
            <summary>
            Compare a byte with a reference value
            </summary>
            <param name="b">Byte to check (unsigned)</param>
            <param name="condByte">Reference signed value</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FS_GetState">
            <summary>
            Get the status of the ANT-FS session
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.MemDev_EEPROMInit(System.UInt16,System.Byte)">
            <summary>
            MEMDEV initialization commands MUST be called after reset to set MEMDEV configuration prior to using FS Commands or requests.
            Init command must be called prior to issuing any FS command or requests. 
            Currently, only SPI interface (min 2MHz rate) is supported with EEPROM devices. 
            Configuration fields should be specified from information found from the EEPROM datasheet. 
            Successful initialization results in FS_NO_ERROR response code.
            </summary>
            <param name="pageWriteSize"> Page Write Size is the physical page write boundary of the EEPROM Device. 
            For EEPROM, this is considered the maximum number of bytes that can be written in one pass and it must be 2^x value. </param>
            <param name="AddrBytesCfg">The address bytes configuration field specifies the required number of bytes used to address the physical memory location 
            on the EEPROM. 
            For example, a 1MBit EEPROM device requires 3 address bytes. </param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.InitMemory">
            <summary>
            Initializes existing file system from saved directory information in NVM. 
            Unsaved information on open files will be lost. 
            Init command must be called prior to using any FS related commands or requests. 
            Init command must also be called after issuing FS Format Memory. 
            Also resets encryption key used for crypto operations. 
            Successful initialization results in FS_NO_ERROR response code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.Format_Memory(System.UInt16,System.UInt16)">
            <summary>
            Command used to create a new empty file system. 
            Any existing directory information and files will be discarded. 
            Minimum number of sectors must be 2 (1 for directory and 1 for each file). 
            Successful format operation results in FS_NO_ERROR response code.
            Number of Sectors * Num Pages per sector * Page Size must not exceed the size of the memory device. 
            If inappropriate values are entered, format may succeed, but FS will be unusable. 
            </summary>
            <param name="numSec"> Number of Sectors </param>
            <param name="pagesPerSector"> Num Pages per Sector. Defines sector size(X * page Size)
             Page Size is defined in MEMDEV_EEPROM_INIT for EEPROM Device</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.DirectorySave">
            <summary>
            Save all open file information into the directory NVM. 
            This should be called before device power off or any unsaved data will be lost. 
            Successful save operation results in FS_NO_ERROR response code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.DirectoryRebuild">
            <summary>
            Rebuilds FS directory and condenses directory size by removing invalidated entries. 
            Rebuilding directory also updates auto file index counter. 
            Successful rebuild results in FS_NO_ERROR response code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileDelete(System.Byte)">
            <summary>
            Delete existing open file. Delete permission must be set on file handle. On successful deletion (FS_NO_ERROR response code), the file handle is freed. 
            If FS_MEMORY_WRITE_ERROR is returned, memory occupied by file is lost but the handle is freed. 
            Any other response codes results in file deletion failure and the file handle remains associated to the open file.
            </summary>
            <param name="handleNum"> File Handle Number</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileClose(System.Byte)">
            <summary>
            Close open flag or file. Any open file handle information is saved to the directory.
            FS_NO_ERROR response code is returned if file close operation is successful.
            Any other response code resulted in file close failure and the file handle still assigned to the file.
            </summary>
            <param name="handleNum">File Handle Number</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileSetSpecificFlags(System.Byte,System.Byte)">
            <summary>
            Update application defined flags on file, but it is not saved to directory NVM. 
            On success, FS_NO_ERROR is returned. 
            </summary>
            <param name="handleNum">File Handle Number</param>
            <param name="newSpecificFlags">Specific Flags</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.DirectoryReadLock(System.Byte)">
            <summary>
            When directory is locked, directory information is prevented from changing. 
            When directory is unlocked, directory information is allowed to change. 
            Attempting to lock a directory that is already locked will result in an error. 
            Attempting to unlock a directory that is already unlocked will result in an error.
            </summary>
            <param name="locked">1 - Lock, 0 - Unlock</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.SetSystemTime(System.UInt32)">
            <summary>
            When this message ID is used in a command message, the specified starting value of the system time to be used in FS can be set. 
            If successful, FS_NO_ERROR is returned
            </summary>
            <param name="seconds">Current Time</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FS_GetLastError(System.Byte)">
            <summary>
            Returns the FSResponse Byte when reponse != 0x00(NO_ERROR)
            </summary>
            <param name="FSResponse">FS Response byte from Response Buffer</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.GetUsedSpace">
            <summary>
            Returns number of used bytes in FS in sector sized increments. 
            On success, returns FS_NO_ERROR response code and the used space value. 
            If any other response code is returned, an invalid used space size value is returned (0xFFFFFFFF).
            </summary>
            <returns>Used Space</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.GetFreeSpace">
            <summary>
            Returns number of free bytes in FS in sector sized increments. 
            On success, returns FS_NO_ERROR response code and the free space value. 
            If any other response code is returned, an invalid free space size value is returned (0xFFFFFFFF).
            </summary>
            <returns>Free Space</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FindFileIndex(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Return file index of first file in directory that matches specified identifier. 
            On success, returns FS_NO_ERROR response code and the file index. 
            If any other response code is returned, an invalid file index is returned (0x0000
            </summary>
            <param name="FileDataType"> File Data Type</param>
            <param name="FileSubType"> File Sub Type </param>
            <param name="FileNumber">File Number</param>
            <returns>File Index</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.DirectoryReadAbsolute(System.UInt64,System.Byte)">
            <summary>
            Read from absolute offset into directory as if it were an ANTFS directory.
            </summary>
            <param name="offset"> Offset </param>
            <param name="readSize"> Bytes Read Size</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.DirectoryReadEntry(System.UInt16)">
            <summary>
            Returns ANTFS directory entry for the file matching the specified file index
            </summary>
            <param name="FileIndex"></param>
            <returns>ANTFS_DIR_ENTRY</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.DirectoryGetSize">
            <summary>
            Returns size in bytes as if it were an ANTFS directory (16-byte blocks). 
            On success, returns FS_NO_ERROR response code and the ANTFS directory size value. 
            If any other response code is returned, an invalid ANTFS directory size value is returned (0xFFFFFFFF).
            </summary>
            <returns>Directory Size</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileCreate(System.UInt16,System.Byte,System.Byte,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Allocates a free sector and saves directory entry of the new file. 
            If 0x0000 is supplied as file index, FS will auto generated a valid index for the file, 
            otherwise a valid index must manually be supplied. 
            If file creation is successful (FS_NO_ERROR is returned), the file index assigned to the created file is returned.
            Any other errors results in an invalid file index being returned (0x0000).
            </summary>
            <param name="fileIndex">File Index</param>
            <param name="ucFileDataType">File Data Type</param>
            <param name="ucFileSubType">File Sub Type</param>
            <param name="usFileNumber">File Number</param>
            <param name="ucFileDataTypeSpecificFlags">File Data Type Specific Flags</param>
            <param name="ucFileGeneralFlags">File General Flags</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileOpen(System.UInt16,System.Byte)">
            <summary>
            Open existing file in FS. By default, read and write pointers are set at the beginning of the file. 
            If append flag is set in Open Flags parameter, then the write pointer is set to the end of the file.
            If file open is successful (FS_NO_ERROR, with the exceptions discussed in .FIT File and Crypto .FIT File), 
            the file handle number is returned. 
            Any other response code results in file open failure and the file handle returned being invalid (0xFF).
            </summary>
            <param name="fileIndex">File Index</param>
            <param name="openFlags">Open Flags</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileReadAbsolute(System.Byte,System.UInt64,System.Byte)">
            <summary>
            Read from absolute offset into a file. File must be opened for reading beforehand. 
            After reading, read pointers positioned at the end of the bytes read. 
            On successful reads (FS_NO_ERROR), the returned number of bytes read as well as the payload is returned. 
            Reading past the end of the directory results in FS_EOF_REACHED_ERROR, however the number of read bytes and the payload prior to reaching EOF is returned.
            </summary>
            <param name="handleNum">File Handle Number</param>
            <param name="offset">Offset</param>
            <param name="readSize">Read Size</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileReadRelative(System.Byte,System.Byte)">
            <summary>
            Read from current read pointer position in file. File must be opened for reading beforehand. 
            After reading, read pointers positioned at the end of the bytes read.
            </summary>
            <param name="handleNum">File Handle Number</param>
            <param name="readSize">Read Size</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileWriteAbsolute(System.Byte,System.UInt64,System.Byte[])">
            <summary>
            Write to absolute offset into a file. File cannot be written to if it was opened for reading. 
            Write absolute cannot be used if file only opened for append operation. 
            After writing, write positioned at the end of the bytes written.
            </summary>
            <param name="handleNum">File Handle Number</param>
            <param name="offset">Offset</param>
            <param name="bytesToWrite">Write Payload</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileWriteRelative(System.Byte,System.Byte[])">
            <summary>
            Write to current write pointer position in file. File cannot be written to if opened for reading.
            </summary>
            <param name="handleNum">File Handle Number</param>
            <param name="bytesToWrite">Write Payload</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileGetSize(System.Byte)">
            <summary>
            Get size of open file in bytes. If successful, FS_NO_ERROR is returned along with the file size in bytes. 
            If any other response code is returned, an invalid file size value is returned (0xFFFFFFFF).
            </summary>
            <param name="handleNum">File Handle Number</param>
            <returns>File Size</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileGetSizeInMem(System.Byte)">
            <summary>
            Get size of the file in terms of the number of total bytes allocated to the file in the FS (size in memory). 
            If successful, FS_NO_ERROR is returned along with the size in bytes. 
            If any other response code is returned, an invalid file size value is returned (0xFFFFFFFF).
            </summary>
            <param name="handleNum">File handle Number</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FileGetSpecificFileFlags(System.Byte)">
            <summary>
            Gets the application defined flags of opened file. 
            If successful, FS_NO_ERROR is returned along with the application defined flags on the file. 
            If any other response code is returned, flag value of 0x00 is returned.
            </summary>
            <param name="handleNum">File Handle Number</param>
            <returns>File Flags</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.SystemTime(System.UInt32)">
            <summary>
            When this message ID is used in a request message, the current system time used in FS is returned.
            </summary>
            <param name="seconds">Current Time</param>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.Crypto_AddUserKeyIndex(System.Byte,System.Byte[])">
            <summary>
            Adds specified user key to be stored in internal memory. 
            Keys are enumerated by Key Index. Up to 10 keys can be used. 
            If successfully stored, FS_NO_ERROR is returned.
            </summary>
            <param name="keyindex">Key Index</param>
            <param name="CK">User Crypto Key</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.Crypto_SetUserKeyIndex(System.Byte)">
            <summary>
            Specify stored user key (specified by Key Index) to be used by FS Encryption/Decryption process. 
            Key remains active until reset, memory re-initialization via MESG_FS_INIT MEMORY or another key is specified. 
            If key successfully selected, FS_NO_ERROR is returned
            </summary>
            <param name="keyindex">User Key Index</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.Crypto_SetUserKeyValue(System.Byte[])">
            <summary>
            Specify non-stored user key to be used by FS Encryption/Decryption process. 
            Key remains active until reset, memory re-initialization via MESG_FS_INIT_MEMORY or another key is specified. 
            If key successfully set, FS_NO_ERROR is returned.d
            </summary>
            <param name="CK">User Crypto Key</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.FIT_FileIntegrityCheck(System.Byte)">
            <summary>
             When this command is issued, a file integrity check is performed on the selected .FIT file 
             by calculating the file 2 byte CRC and comparing it versus the appended 2 byte CRC. 
             If file integrity is intact, then FS_NO_ERROR is returned.Provided file handle must be pointing to a .FIT file (0x80 data type in file directory entry) as well as opened as read-only. 
             Performing an integrity check on a non .FIT file and/or a write handle (write/erase/append open flags) is not allowed.
            </summary>
            <param name="handle">File Handle Number</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_Open">
            <summary>
            Start ANTFS beacon.
            </summary>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_Close">
            <summary>
            Stop ANTFS beacon.
            </summary>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_ConfigBeacon(System.UInt16,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Configures the ANTFS Beacon properties. 
            </summary>
            <param name="BeaconDeviceType">Beacon Device Type ID</param>
            <param name="ManID">Manufacturers ID</param>
            <param name="AuthKey">Authentication Type</param>
            <param name="Status">Beacon Status</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetFriendlyName(System.String)">
            <summary>
            Set the Friendlyname
            </summary>
            <param name="friendlyname">Friendlyname as a string</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetPasskey(System.String)">
            <summary>
            Sets the Passkey
            </summary>
            <param name="passkey">Passkey as a string</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetBeaconState(System.Byte)">
            <summary>
            Sets the ANTFS beacon status byte.
            </summary>
            <param name="Status">Bits 0 -2 are invalid</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_PairResponse(System.Byte)">
            <summary>
            Command to respond to pairing request.
            </summary>
            <param name="decision">0 - Reject , 1 - Accept</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetLinkFrequency(System.Byte,System.Byte)">
            <summary>
            Set the Beacon/Link RF frequency of the ANTFS connection
            </summary>
            <param name="channelnum">Channel Number</param>
            <param name="frequency">24xxMhz, xx as byte, 0xFF is to Disable</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetBeaconTimeout(System.Byte)">
            <summary>
            Configure timeout for ANTFS beacon.
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetPairingTimeout(System.Byte)">
            <summary>
            Configure timeout for ANTFS pairing process
            </summary>
            <param name="PairTimeout">Timeout in seconds</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_RemoteFileCreateEnable(System.Byte)">
            <summary>
            Enables or disables file creation in FS through ANTFS.
            </summary>
            <param name="enable">1 - Enable, 0 - Disable</param>
            <returns>FS Response</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_GetCmdPipe(System.Byte,System.Byte)">
            <summary>
            Command to read ANTFS command pipe data.
            </summary>
            <param name="offset">Offset</param>
            <param name="readsize">Read Size</param>
            <returns>Read Size and Read Payload</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANT_IntegratedANTFSClient.ANTFS_SetCmdPipe(System.Byte,System.Byte[])">
            <summary>
            Command to write ANTFS command pipe data.
            </summary>
            <param name="offset">Offset</param>
            <param name="bytesToWrite">Bytes to be written</param>
            <returns>Size written</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel">
            <summary>
            Control class for an ANT-FS client channel.
            Handles creating channels and device setup, as well as the ANT-FS client implementation.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.#ctor(ANT_Managed_Library.IANT_Channel)">
            <summary>
            Constructor attempts to automatically detect an ANT USB device and open a connection to it
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.Finalize">
            <summary>
            Destructor closes all opened resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.Dispose">
            <summary>
            Dispose method for explicit resource cleanup
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.Dispose(System.Boolean)">
            <summary>
            Close connection, and release all resources
            Inherit public finalizer from ANT_Device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.releaseDownloadBuffer">
            <summary>
            Unpin and release buffer holding unmanaged data
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.Cancel">
            <summary>
            Cancels any pending actions and returns the library
            to the appropriate ANTFS layer
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetLibraryVersion">
            <summary>
            Gets the version string of the underlying ANT-FS library
            </summary>
            <returns>ANT-FS Library Version String</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetStatus">
            <summary>
            Returns the current library status
            </summary>
            <returns>Current library status</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetHostName">
            <summary>
            Gets the host's friendly name string from the most recent session
            </summary>
            <returns>Host friendly name</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetRequestParameters">
            <summary>
            Gets the full parameters for a download, upload or erase request
            from the host
            </summary>
            <returns>Request parameters</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetRequestedFileIndex">
            <summary>
            Gets the file index for a download, upload or erase request from
            the host.  If more details are desired, use GetRequestParameters().
            </summary>
            <returns>Requested file index</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetDownloadStatus">
            <summary>
            Gets the transfer progress of a pending or complete download
            </summary>
            <returns>The transfer status, including the current byte progress,
            total expected length of the download, and current percentage.
            Returns null if no valid status could be obtained.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.GetDisconnectParameters">
            <summary>
            Gets the parameters of a disconnect command requested by the host
            </summary>
            <returns>Disconnect parameters</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetFriendlyName(System.String)">
            <summary>
            Configures the friendly name for the ANT-FS client
            </summary>
            <param name="friendlyName">Client friendly name</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetPassKey(System.Byte[])">
            <summary>
            Configures the passkey for a client to establish authenticated
            sessions with a host device, if passkey authentication is
            selected.  If a passkey is not configured, all passkey authentication
            requests will be rejected.
            </summary>
            <param name="passKey">Authentication passkey (max 255 bytes)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetChannelID(System.Byte,System.Byte)">
            <summary>
            Set the channel ID of the ANT-FS client
            If this function is not used to explicitly configure the channel ID, the ANT-FS host will use the following defaults:
            Device type: 1
            Transmission type: 5
            </summary>
            <param name="deviceType">Device type to assign to channel (ANT Channel ID)</param>
            <param name="transmissionType">Transmission type to assign to channel (ANT Channel ID)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetChannelPeriod(System.UInt16)">
            <summary>
            Sets a custom channel period for the ANT-FS beacon
            </summary>
            <param name="channelPeriod">Channel period, in 1/32768 counts</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetClientNetworkKey(System.Byte,System.Byte[])">
            <summary>
            Set the network key for the ANT-FS client
            If this function is not used to explicitly configure the network key, the ANT-FS client will use the
            ANT-FS network key, as set in the base ANT Library, and network number 0.  
            Configuration is applied when the beacon is open
            </summary>
            <param name="netNumber">network number</param>
            <param name="networkKey">8-byte network key</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetTransmitPower(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower)">
            <summary>
            Configures the transmit power for the ANT-FS channel, in case
            different power levels are desired in the link and connected states,
            for example, to allow the use of proximity search in a host device.
            If not configured, the transmit power will be set to 0dBm.
            </summary>
            <param name="pairingLevel">Transmit power to use while in Link state</param>
            <param name="connectedLevel">Transmit power to use after a connection has been established to a host</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetPairingEnabled(System.Boolean)">
            <summary>
            Enable pairing authentication
            </summary>
            <param name="enable">Selects whether pairing authentication is enabled or not in the device</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetUploadEnabled(System.Boolean)">
            <summary>
            Enable uploads
            </summary>
            <param name="enable">Selects whether upload functionality is supported</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetDataAvailable(System.Boolean)">
            <summary>
            Indicate if data is available for download
            </summary>
            <param name="dataIsAvailable">Selects whether data is available for download</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetBeaconTimeout(System.Byte)">
            <summary>
            Configures the beacon timeout
            </summary>
            <param name="timeoutSeconds">Timeout, in seconds</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SetPairingTimeout(System.Byte)">
            <summary>
            Configures the pairing timeout
            </summary>
            <param name="timeoutSeconds">Timeout, in seconds</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.Configure(ANT_Managed_Library.ANTFS.ANTFS_ClientParameters)">
            <summary>
            Sets up the ANT-FS client configuration parameters.  This function can only be used
            while the beacon is not open.  Individual parameters can be configured while the beacon is open
            If this function is not called, default beacon parameters are used.
            </summary>
            <see>SetPairingEnabled</see>
            <see>SetUploadEnabled</see>
            <see>SetDataAvailable</see>
            <see>SetBeaconTimeout</see>
            <see>SetPairingTimeout</see>
            <param name="clientParameters">ANT-FS Client parameters</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.OpenBeacon">
            <summary>
            Begins the channel configuration to transmit the ANT-FS beacon.
            If the channel has already been configured (ANT-FS broadcast), the
            channel period needs to be specified in this function to let the 
            client know the current period. If a channel period is not specified (0),
            the channel configuration is performed as specified in the beacon parameters.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.CloseBeacon(System.Boolean)">
            <summary>
            Ends the ANT-FS session.
            </summary>
            <param name="returnToBroadcast">Set to true to return to broadcast (leave the channel open), and to false to close the channel.</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.CloseBeacon">
            <summary>
            Ends the ANT-FS session and closes the channel.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SendPairingResponse(System.Boolean)">
            <summary>
            Sends a response to a pairing request.
            </summary>
            <param name="acceptRequest">Select whether to accept or reject the request</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SendEraseResponse(ANT_Managed_Library.ANTFS.EraseResponse)">
            <summary>
            Sends a response to a request to erase a file from an
            authenticated remote device
            </summary>
            <param name="response">The response to the erase request</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SendDownloadResponse(ANT_Managed_Library.ANTFS.DownloadResponse,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Sends a response to a request to download a file to a host device
            </summary>
            <param name="response">The response to the download request</param>
            <param name="fileIndex">The file index to download</param>
            <param name="blockSize">The maximum number of bytes to send in a single block</param>
            <param name="downloadData">File to download.  The entire file most be provided, even if the host requested an offset.</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.SendDownloadResponse(ANT_Managed_Library.ANTFS.DownloadResponse,System.UInt16,System.Byte[])">
            <summary>
            Sends a response to a request to download a file to a host device.
            Will attempt to send the entire download in a single block.
            </summary>
            <param name="response">The response to the download request</param>
            <param name="fileIndex">The file index to download</param>
            <param name="downloadData">File to download.  The entire file most be provided, even if the host requested an offset.</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.ResponseThreadHandler">
            <summary>
            Processing of incoming ANT-FS responses
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.OnResponse">
            <summary>
            The ANT-FS host callback event, triggered every time a response is received from the ANT-FS client library
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.Response">
            <summary>
            ANT-FS Client Responses
            </summary>
            !!! Must match the enum in antfs_client_channel.hpp
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_ClientChannel.State">
            <summary>
            ANT-FS Client State
            </summary>
            !!! Must match the enum in antfs_client_channel.hpp
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_HostChannel">
            <summary>
            ANT-FS Host
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.#ctor(ANT_Managed_Library.IANT_Channel)">
            <summary>
            Creates ANT-FS object, response thread, and allocates unmanaged buffer for use with library
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Finalize">
            <summary>
            Destructor closes all opened resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Dispose">
            <summary>
            Dispose method for explicit resource cleanup
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Dispose(System.Boolean)">
            <summary>
            Close connection, and release all resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.ReleaseUploadBuffer">
            <summary>
            Unpin and release buffer holding unmanaged data
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SetChannelID(System.Byte,System.Byte)">
            <summary>
            Set the channel ID of the ANT-FS host
            If this function is not used to explicitly configure the channel ID, the ANT-FS host will use the following defaults:
            Device type: 1
            Transmission type: 5
            </summary>
            <param name="ucDeviceType">Device type to assign to channel (ANT Channel ID). Set to 0 for receiver wild card matching</param>
            <param name="ucTransmissionType">Transmission type to assign to channel (ANT Channel ID).  Set to 0 for receiver wild card matching</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SetChannelPeriod(System.UInt16)">
            <summary>
            Set the channel period of the ANT-FS host.
            If this function is not used to explicitly configure the channel period, the ANT-FS host will use the default value of 8Hz
            </summary>
            <param name="usChannelPeriod">Desired period in seconds * 32768</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SetNetworkKey(System.Byte,System.Byte[])">
            <summary>
            Set the network key for the ANT-FS host
            If this function is not used to explicitly configure the network key, the ANT-FS host will use the
            ANT-FS network key, as set in the base ANT Library
            </summary>
            <param name="netNumber">network number</param>
            <param name="networkKey">8-byte network key</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SetProximitySearch(System.Byte)">
            <summary>
            Sets the value for the proximity bin setting for searching. 
            If applying this value fails when attempting to start search,
            it is ignored to maintain compatibility with devices that
            do not support this feature. This means that a real failure can occur
            on a device that actually does support it, and it will be missed. The
            debug log will show if this command fails.
            </summary>
            <param name="searchThreshold">Desired proximity bin from 0-10</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SetSearchWaveform(System.UInt16)">
             <summary>
             Sets the value for the ANT search waveform.  This can be used if faster
             channel acquisition is desired.  Search waveform must be optimized based on
             the channel period of the devices we are expecting to connect to.
             </summary>
             <param name="searchWaveform">Desired search waveform.  Suggested values:
              86 (default), 85 (optimized for SDM and 4Hz), 96 (optimized for 4Hz and 8Hz)
            </param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SetSerialNumber(System.UInt32)">
            <summary>
            Sets the serial number of the host device.
            </summary>
            <param name="serialNumber">4-byte host serial number</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.ClearSearchDeviceList">
            <summary>
            Clears the internal search device list
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.AddSearchDevice(ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters@,ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters@)">
            <overloads>
            Adds a set of parameters for which to search to the internal search device list
            </overloads>
            <summary>
            Adds a set of parameters for which to search to the internal search device list, explicitly specifying 
            all parameters and search mask. 
            </summary>
            <param name="stSearchMask">Device parameter search mask. Set a member to zero (0) to wildcard search for it.
            Otherwise, set the bits that you want to be matched to 1 in each member.
            Note that the default search masks or wildcards should normally be applied to the ucStatusByte1 and ucStatusByte2 
            members of the search mask. Setting bits outside the masks, specially reserved bits, may lead to undesired
            behavior.</param>
            <param name="stDeviceParameters">Device Parameters to include in a search.  Set the member to the desired search value.
            A member in this structure is ignored if the associated member in the Search Mask is set to zero (0) for wildcard.</param>
            <returns>A handle to the search device entry.  If the return value is zero (0), the function failed adding the device entry.
            This means that the device list is already full</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.AddSearchDevice(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Adds a set of parameters for which to search to the internal search device list, matching only the Device ID,
            Manufacturer ID and Device Type
            </summary>
            <param name="ulDeviceID">Device ID to match</param>
            <param name="usManufacturerID">Manufacturer ID to match</param>
            <param name="usDeviceType">Device type to match</param>
            <returns>A handle to the search device entry.  If the return value is zero (0), the function failed adding the device entry.
            This means that the device list is already full</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.RemoveSearchDevice(System.UInt16)">
            <summary>
            Removes a device entry from the internal search list
            </summary>
            <param name="usDeviceHandle">Handle to the device entry to be removed from the list</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.RequestSession(System.Byte,System.Byte)">
            <summary>
            Requests an ANT-FS session, from an already connected broadcast device.
            </summary>
            <param name="ucBroadcastRadioFrequency">The frequency of currently connected device
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz).</param>
            <param name="ucConnectRadioFrequency">The frequency on which the connection communication will occur.
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz).</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SearchForDevice(System.Byte,System.Byte,System.UInt16,System.Boolean)">
            <overloads>
            Begins a search for ANT-FS remote devices
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Begins a search for ANT-FS remote devices
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="ucSearchRadioFrequency">The frequency on which to search for devices.  
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz).</param>
            <param name="ucConnectRadioFrequency">The frequency on which the connection communication will occur.
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz)</param>
            <param name="usRadioChannelID">Device number to assign to channel (ANT Channel ID)</param>
            <param name="bUseRequestPage">Selects whether to search for broadcast devices, and request the beacon</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SearchForDevice(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Begins a search for ANT-FS remote devices.  The search will continue until a device is found,
            the Cancel() function is called, an error occurs, or the library is closed.
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="ucSearchRadioFrequency">The frequency on which to search for devices.  
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz).</param>
            <param name="ucConnectRadioFrequency">The frequency on which the connection communication will occur.
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz)</param>
            <param name="usRadioChannelID">Device number to assign to channel (ANT Channel ID)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SearchForDevice">
            <summary>
            Begins a search for ANT-FS remote devices, using the default ANT-FS search frequency (2.450GHz) and
            an adaptive frequency hopping scheme when the connection is established.
            The host will continue to search for devices until a device is found, the Cancel() function is called, 
            an error occurs, or the library is closed.
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Disconnect(System.UInt16,System.Byte,System.Byte,System.Byte)">
            <overloads>
            Disconnect from a remote device, going back to the state specified by the disconnect type.
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Disconnect from a remote device.  Optionally put that device on a blackout
            list for a period of time
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usBlackoutTime">Number of seconds the device ID should remain on
            the blackout list. If set to BlackoutTime.None, the device is not put in a blackout list.
            If set to BlackoutTime.Infinite, the device will remain in the list until explicitly
            removed or until the blackout list is reset</param>
            <param name="disconnectType">Disconnect Command type</param>
            <param name="undiscoverableTimeDuration">Time, in 30 seconds increments, the client
            device will remain undiscoverable after disconnect has been requested. Set to 0 to disable.</param>
            <param name="undiscoverableAppSpecificDuration">Application specific duration the client
            shall remain undiscoverable after disconnection</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Disconnect">
            <summary>
            Disconnect from a remote device, without putting it in the blackout list
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.SwitchFrequency(System.Byte,ANT_Managed_Library.ANTFS.BeaconPeriod)">
            <summary>
            Request the connected remote device to switch to the specified
            radio frequency and channel period
            </summary>
            <param name="ucRadioFrequency">New radio frequency</param>
            <param name="beaconPeriod">New beacon period</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Blackout(System.UInt32,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Puts the device on a blackout list for a period of time.
            A device in the blackout list will not show up in any search results.
            A wildcard parameter (0) is not allowed for any of the device ID parameters.
            An exception is thrown if the device can not be added to the blackout list, 
            either because the list is full, or the device ID is invalid
            </summary>
            <param name="ulDeviceID">The device ID of a specific device</param>
            <param name="usManufacturerID">The specific manufacturer ID</param>
            <param name="usDeviceType">The specific device type</param>
            <param name="usBlackoutTime">Number of seconds the device ID should remain on
            the blackout list. If set to BlackoutTime.None, the device is not put in a blackout list.
            If set to BlackoutTime.Infinite, the device will remain in the list until explicitly
            removed or until the blackout list is reset</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.RemoveBlackout(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Remove the device from the blackout list
            A wildcard parameter (0) is not allowed for any of the device ID parameters,
            and will result in returning False.
            Throws an exception if the device can not be removed from the list (e.g. device
            was not in list)
            </summary>
            <param name="ulDeviceID">The device ID of a specific device</param>
            <param name="usManufacturerID">The specific manufacturer ID</param>
            <param name="usDeviceType">The specific device type</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.ClearBlackoutList">
            <summary>
            Clears the blackout list
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.EnablePing(System.Boolean)">
            <summary>
            Enables ping message to be sent to the remote device periodically.
            This can be used to keep the remote device from timing out during operations
            that wait for user input.
            </summary>
            <param name="bEnable">Periodic ping enable</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Authenticate(ANT_Managed_Library.ANTFS.AuthenticationType,System.Byte[],System.UInt32)">
            <overloads>
            Requests to pair with the connected remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Request to pair with the connected remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="authType">The type of authentication to execute on the remote device</param>
            <param name="authString">String to be used in conjunction with the particular authentication type (e.g. passkey)</param>
            <param name="ulTimeout">Number of miliseconds to wait for a response after the authenticate command is set</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Authenticate(ANT_Managed_Library.ANTFS.AuthenticationType,System.String,System.UInt32)">
            <summary>
            Request to pair with the connected remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="authType">The type of authentication to execute on the remote device</param>
            <param name="authString">String to be used in conjunction with the particular authentication type (e.g. friendly name)</param>
            <param name="ulTimeout">Number of miliseconds to wait for a response after the authenticate command is sent</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Authenticate(ANT_Managed_Library.ANTFS.AuthenticationType,System.UInt32)">
            <summary>
            Request to pair with the connected remote device, without specifying an authentication string
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="authType">The type of authentication to execute on the remote device</param>
            <param name="ulTimeout">Number of miliseconds to wait for a response after the authenticate command is sent</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Download(System.UInt16,System.UInt32,System.UInt32,System.UInt32)">
            <overloads>
            Request a download of a file from the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Request a download of a file from the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be downloaded</param>
            <param name="ulDataOffset">Byte offset from where to begin transferring the data</param>
            <param name="ulMaxDataLength">Maximum number of bytes to download.  Set to zero (0) if 
            the host does not wish to limit the total size of the download</param>
            <param name="ulMaxBlockSize">Maximum number of bytes to download in a single block. Set
            to zero (0) if the host does not wish to limit the block size</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Download(System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Request a download of a file from the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be downloaded</param>
            <param name="ulDataOffset">Byte offset from where to begin transferring the data</param>
            <param name="ulMaxDataLength">Maximum number of bytes to download.  Set to zero (0) if 
            the host does not wish to limit the total size of the download</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.DownloadDirectory">
            <summary>
            Requests a download of the directory file from the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.EraseData(System.UInt16)">
            <summary>
            Requests the erasure of a file on the authenticated remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number of the file to erase</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Upload(System.UInt16,System.UInt32,System.Byte[],System.Boolean)">
            <overloads>
            Requests an upload of a file to the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Requests an upload of a file to the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be uploaded</param>
            <param name="ulDataOffset">The byte offset from where to begin transferring the data</param>
            <param name="uploadData">Buffer where data to be sent is stored</param>
            <param name="bForceOffset">Force the offset</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Upload(System.UInt16,System.Byte[])">
            <summary>
            Requests a new upload of a file to the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be uploaded</param>
            <param name="uploadData">Buffer where data to be sent is stored</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.ManualTransfer(System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Sends data directly to the device without requesting first
            Care must be taken to ensure the device can handle the amount of data being sent using this method
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be uploaded</param>
            <param name="ulDataOffset">The byte offset from where to begin transferring the data</param>
            <param name="manualData">Buffer where data to be sent is stored</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetFoundDeviceParameters">
            <summary>
            Retrieves the parameters of the most recently found device
            </summary>
            <returns>Parameters of the most recently found device, or null if no parameters could be retrieved</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetFoundDeviceChannelID">
            <summary>
            Retrieves the channel ID of the most recently found device.
            An exception will be thrown if no device has been found
            </summary>
            <returns>The Channel ID of the most recently found device.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetAuthResponse">
            <summary>
            Obtains the additional data received on an Authentication Response (e.g. PassKey), if available
            </summary>
            <returns>Authentication response additional parameters, or an empty array if no additional parameters were received</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetDownloadStatus">
            <summary>
            Gets the transfer progress of a pending or complete download
            </summary>
            <returns>The transfer status, including the current byte progress,
            total expected length of the download, and current percentage.
            Returns null if no valid status could be obtained.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetUploadStatus">
            <summary>
            Gets the transfer progress of a pending or complete upload
            </summary>
            <returns>The transfer status, including the current byte progress,
            total expected length of the upload, and current percentage.
            Returns null if no valid status could be obtained.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetTransferData">
            <summary>
            Gets the received data from a transfer (download)
            </summary>
            <returns>Buffer containing the downloaded data.
            Returns an empty buffer if no data is available or the download size is 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetDownloadSize">
            <summary>
            Retrieves the size of a downloaded file
            </summary>
            <returns>Download size (in bytes)</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetStatus">
            <summary>
            Returns the current library status
            </summary>
            <returns>Current library status</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.GetLibraryVersion">
            <summary>
            Gets the version string of the underlying ANT-FS library
            </summary>
            <returns>ANT-FS Library Version String</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Cancel">
            <summary>
            Cancels any pending actions and returns the library to the appropiate ANT-FS layer if possible,
            i.e. if the library was executing a download command in the transport layer, the library would
            be returned to the Transport State.
            A response of CancelDone will be sent back to the application when the cancel operation is complete.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.ResponseThreadHandler">
            <summary>
            Processing of incoming ANT-FS responses
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.OnResponse">
            <summary>
            The ANT-FS host callback event, triggered every time a response is received from the ANT-FS host library
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.Response">
            <summary>
            ANT-FS Responses
            </summary>
            !!! Must match the enum in antfs_host_channel.hpp
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_HostChannel.State">
            <summary>
            ANT-FS State
            </summary>
            !!! Must match the enum in antfs_host_channel.hpp
        </member>
        <member name="T:ANT_Managed_Library.dDeviceNotificationHandler">
            <summary>
            Delegate for the DeviceNotification event
            </summary>
            <param name="notification">The notification code for the current event</param>
            <param name="notificationInfo">An object that optionally holds more information about the current event</param>
        </member>
        <member name="T:ANT_Managed_Library.dRawChannelResponseHandler">
            <summary>
            Delegate for Channel Response Event for forwarding the raw msg struct. If you are coding in C# use the other response event version.
            </summary>
            <param name="message">Message bytes received from device</param>
            <param name="messageSize">Length of data in message structure</param>
        </member>
        <member name="T:ANT_Managed_Library.dChannelResponseHandler">
            <summary>
            Delegate for Channel Response Event
            </summary>
            <param name="response">Message details received from device</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_VersionInfo">
            <summary>
            The information for this version of the ANT Managed Library
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_VersionInfo.versionNumberLastChangedOn">
            <summary>
            This string shows the date the library received its current version number
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_VersionInfo.getManagedLibraryVersion">
            <summary>
            Returns the version information as a string
            </summary>
            <returns>Managed Library Version String</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_VersionInfo.getUnmanagedLibraryVersion">
            <summary>
            Gets the version string of the underlying unmanaged wrapper library, ANT_WrappedLib.dll
            </summary>
            <returns>Unmanaged Wrapper Version String</returns>
        </member>
    </members>
</doc>
